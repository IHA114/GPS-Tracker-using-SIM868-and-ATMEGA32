
Day6_GPS_Tracker_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00002d94  00002e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000337  008000ce  008000ce  00002e96  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00002e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000557  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034e5  00000000  00000000  000034ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d03  00000000  00000000  00006992  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002915  00000000  00000000  00007695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  00009fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000713  00000000  00000000  0000a49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001be4  00000000  00000000  0000abaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000438  00000000  00000000  0000c793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__ctors_end>
       4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
       8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
       c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      10:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      14:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      18:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      1c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      20:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      24:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__vector_9>
      28:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      2c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      30:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      34:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_13>
      38:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      3c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      40:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      44:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      48:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      4c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      50:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>

00000054 <__c.1936>:
      54:	47 50 53 20 54 72 61 63 6b 65 72 00                 GPS Tracker.

00000060 <__c.1521>:
      60:	41 54 2b 48 54 54 50 52 45 41 44 0d 0a 00           AT+HTTPREAD...

0000006e <__c.1518>:
      6e:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 30 0d     AT+HTTPACTION=0.
      7e:	0a 00                                               ..

00000080 <__c.1516>:
      80:	22 0d 0a 00                                         "...

00000084 <__c.1514>:
      84:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 55 52 4c     AT+HTTPPARA="URL
      94:	22 2c 22 00                                         ",".

00000098 <__c.1501>:
      98:	41 54 2b 48 54 54 50 52 45 41 44 0d 0a 00           AT+HTTPREAD...

000000a6 <__c.1498>:
      a6:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 30 0d     AT+HTTPACTION=0.
      b6:	0a 00                                               ..

000000b8 <__c.1496>:
      b8:	22 0d 0a 00                                         "...

000000bc <__c.1493>:
      bc:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 55 52 4c     AT+HTTPPARA="URL
      cc:	22 2c 22 00                                         ",".

000000d0 <__c.1460>:
      d0:	4f 4b 00                                            OK.

000000d3 <__c.1457>:
      d3:	41 54 0d 0a 00                                      AT...

000000d8 <__c.1400>:
      d8:	41 54 2b 53 41 50 42 52 3d 30 2c 31 0d 0a 00        AT+SAPBR=0,1...

000000e7 <__c.1394>:
      e7:	41 54 2b 48 54 54 50 49 4e 49 54 0d 0a 00           AT+HTTPINIT...

000000f5 <__c.1392>:
      f5:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 0a 00        AT+SAPBR=2,1...

00000104 <__c.1390>:
     104:	41 54 2b 53 41 50 42 52 3d 31 2c 31 0d 0a 00        AT+SAPBR=1,1...

00000113 <__c.1388>:
     113:	41 54 2b 48 54 54 50 49 4e 49 54 0d 0a 00           AT+HTTPINIT...

00000121 <__c.1385>:
     121:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 0a 00        AT+SAPBR=2,1...

00000130 <__c.1380>:
     130:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     140:	4e 22 2c 22 54 41 54 41 2e 44 4f 43 4f 4d 4f 2e     N","TATA.DOCOMO.
     150:	49 4e 54 45 52 4e 45 54 22 0d 0a 00                 INTERNET"...

0000015c <__c.1378>:
     15c:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     16c:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 0d 0a 00     NTYPE","GPRS"...

0000017c <__c.1483>:
     17c:	41 54 2b 43 47 4e 53 49 4e 46 0d 0a 00              AT+CGNSINF...

00000189 <__c.1460>:
     189:	41 54 2b 43 47 4e 53 49 4e 46 0d 0a 00              AT+CGNSINF...

00000196 <__c.1449>:
     196:	2b 46 54 50 45 58 54 47 45 54 3a 20 32 2c 32 37     +FTPEXTGET: 2,27
     1a6:	36 34 38 0d 0a 00                                   648...

000001ac <__c.1447>:
     1ac:	41 54 2b 46 54 50 45 58 54 47 45 54 3d 34 2c 22     AT+FTPEXTGET=4,"
     1bc:	65 70 6f 22 0d 0a 00                                epo"...

000001c3 <__c.1442>:
     1c3:	41 54 2b 46 54 50 45 58 54 47 45 54 3d 31 0d 0a     AT+FTPEXTGET=1..
     1d3:	00                                                  .

000001d4 <__c.1440>:
     1d4:	41 54 2b 46 54 50 47 45 54 50 41 54 48 3d 22 2f     AT+FTPGETPATH="/
     1e4:	22 0d 0a 00                                         "...

000001e8 <__c.1438>:
     1e8:	41 54 2b 46 54 50 47 45 54 4e 41 4d 45 3d 22 4d     AT+FTPGETNAME="M
     1f8:	54 4b 33 2e 45 50 4f 22 0d 0a 00                    TK3.EPO"...

00000203 <__c.1436>:
     203:	41 54 2b 46 54 50 50 57 3d 22 31 31 31 31 31 31     AT+FTPPW="111111
     213:	22 0d 0a 00                                         "...

00000217 <__c.1434>:
     217:	41 54 2b 46 54 50 55 4e 3d 22 63 75 73 74 6f 6d     AT+FTPUN="custom
     227:	65 72 22 0d 0a 00                                   er"...

0000022d <__c.1432>:
     22d:	41 54 2b 46 54 50 53 45 52 56 3d 22 31 31 36 2e     AT+FTPSERV="116.
     23d:	32 34 37 2e 31 31 39 2e 31 36 35 22 0d 0a 00        247.119.165"...

0000024c <__c.1429>:
     24c:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 0a 00        AT+SAPBR=2,1...

0000025b <__c.1427>:
     25b:	41 54 2b 53 41 50 42 52 3d 31 2c 31 0d 0a 00        AT+SAPBR=1,1...

0000026a <__c.1425>:
     26a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     27a:	4e 22 2c 22 54 41 54 41 2e 44 4f 43 4f 4d 4f 2e     N","TATA.DOCOMO.
     28a:	49 4e 54 45 52 4e 45 54 22 0d 0a 00                 INTERNET"...

00000296 <__c.1423>:
     296:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     2a6:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 0d 0a 00     NTYPE","GPRS"...

000002b6 <__c.1413>:
     2b6:	41 54 2b 43 47 50 53 52 53 54 3d 31 0d 0a 00        AT+CGPSRST=1...

000002c5 <__c.1411>:
     2c5:	41 54 2b 43 47 4e 53 50 57 52 3d 31 0d 0a 00        AT+CGNSPWR=1...

000002d4 <__c.1406>:
     2d4:	41 54 2b 43 47 4e 53 41 49 44 3d 33 31 2c 31 2c     AT+CGNSAID=31,1,
     2e4:	31 0d 0a 00                                         1...

000002e8 <__c.1404>:
     2e8:	41 54 2b 43 47 4e 53 50 57 52 3d 31 0d 0a 00        AT+CGNSPWR=1...

000002f7 <__c.1393>:
     2f7:	41 54 2b 43 47 50 53 52 53 54 3d 31 0d 0a 00        AT+CGPSRST=1...

00000306 <__c.1391>:
     306:	41 54 2b 43 47 4e 53 50 57 52 3d 31 0d 0a 00        AT+CGNSPWR=1...

00000315 <__c.1379>:
     315:	41 54 2b 43 47 4e 53 43 48 4b 3d 33 2c 31 0d 0a     AT+CGNSCHK=3,1..
     325:	00                                                  .

00000326 <__c.1571>:
     326:	41 54 2b 43 43 4c 4b 3f 0d 0a 00                    AT+CCLK?...

00000331 <__c.1527>:
     331:	4f 4b 00                                            OK.

00000334 <__c.1525>:
     334:	41 54 0d 0a 00                                      AT...

00000339 <__c.1521>:
     339:	41 54 2b 43 50 4f 57 44 3d 31 0d 0a 00              AT+CPOWD=1...

00000346 <__c.1517>:
     346:	41 54 26 57 0d 0a 00                                AT&W...

0000034d <__c.1515>:
     34d:	41 54 2b 43 4c 54 53 3d 31 0d 0a 00                 AT+CLTS=1...

00000359 <__c.1490>:
     359:	41 54 2b 43 4d 47 46 3d 31 0d 0a 00                 AT+CMGF=1...

00000365 <__c.1488>:
     365:	2b 43 50 49 4e 3a 20 52 45 41 44 59 00              +CPIN: READY.

00000372 <__c.1486>:
     372:	41 54 2b 43 50 49 4e 3f 0d 0a 00                    AT+CPIN?...

0000037d <__c.1483>:
     37d:	41 54 2b 43 47 4e 53 50 57 52 3d 30 0d 0a 00        AT+CGNSPWR=0...

0000038c <__c.1481>:
     38c:	41 54 45 30 0d 0a 00                                ATE0...

00000393 <__c.1479>:
     393:	4f 4b 00                                            OK.

00000396 <__c.1477>:
     396:	41 54 0d 0a 00                                      AT...

0000039b <__c.1475>:
     39b:	41 54 45 30 0d 0a 00                                ATE0...

000003a2 <__c.1466>:
     3a2:	2b 43 52 45 47 3a 20 30 2c 35 00                    +CREG: 0,5.

000003ad <__c.1464>:
     3ad:	2b 43 52 45 47 3a 20 30 2c 31 00                    +CREG: 0,1.

000003b8 <__c.1462>:
     3b8:	41 54 2b 43 52 45 47 3f 0d 0a 00                    AT+CREG?...

000003c3 <__c.1455>:
     3c3:	0d 0a 00                                            ...

000003c6 <__c.1453>:
     3c6:	41 54 2b 43 4d 47 44 3d 00                          AT+CMGD=.

000003cf <__c.1447>:
     3cf:	22 0d 0a 00                                         "...

000003d3 <__c.1445>:
     3d3:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

000003dd <__c.1437>:
     3dd:	22 0d 0a 00                                         "...

000003e1 <__c.1434>:
     3e1:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

000003eb <__c.1421>:
     3eb:	0d 0a 00                                            ...

000003ee <__c.1419>:
     3ee:	41 54 2b 43 4d 47 44 3d 00                          AT+CMGD=.

000003f7 <__c.1407>:
     3f7:	0d 0a 00                                            ...

000003fa <__c.1404>:
     3fa:	41 54 2b 43 4d 47 52 3d 00                          AT+CMGR=.

00000403 <__c.1380>:
     403:	2b 43 4d 54 49 3a 00                                +CMTI:.

0000040a <__ctors_end>:
     40a:	11 24       	eor	r1, r1
     40c:	1f be       	out	0x3f, r1	; 63
     40e:	cf e5       	ldi	r28, 0x5F	; 95
     410:	d8 e0       	ldi	r29, 0x08	; 8
     412:	de bf       	out	0x3e, r29	; 62
     414:	cd bf       	out	0x3d, r28	; 61

00000416 <__do_copy_data>:
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	a0 e6       	ldi	r26, 0x60	; 96
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	e4 e9       	ldi	r30, 0x94	; 148
     41e:	fd e2       	ldi	r31, 0x2D	; 45
     420:	02 c0       	rjmp	.+4      	; 0x426 <.do_copy_data_start>

00000422 <.do_copy_data_loop>:
     422:	05 90       	lpm	r0, Z+
     424:	0d 92       	st	X+, r0

00000426 <.do_copy_data_start>:
     426:	ae 3c       	cpi	r26, 0xCE	; 206
     428:	b1 07       	cpc	r27, r17
     42a:	d9 f7       	brne	.-10     	; 0x422 <.do_copy_data_loop>

0000042c <__do_clear_bss>:
     42c:	14 e0       	ldi	r17, 0x04	; 4
     42e:	ae ec       	ldi	r26, 0xCE	; 206
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	01 c0       	rjmp	.+2      	; 0x436 <.do_clear_bss_start>

00000434 <.do_clear_bss_loop>:
     434:	1d 92       	st	X+, r1

00000436 <.do_clear_bss_start>:
     436:	a5 30       	cpi	r26, 0x05	; 5
     438:	b1 07       	cpc	r27, r17
     43a:	e1 f7       	brne	.-8      	; 0x434 <.do_clear_bss_loop>
     43c:	0e 94 94 04 	call	0x928	; 0x928 <main>
     440:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <_exit>

00000444 <__bad_interrupt>:
     444:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000448 <serial_init>:
volatile int8_t UQEnd;


void serial_init(uint16_t baudrate)
{
uint16_t ubrrvalue = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     448:	9c 01       	movw	r18, r24
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	ca 01       	movw	r24, r20
     450:	b9 01       	movw	r22, r18
     452:	60 58       	subi	r22, 0x80	; 128
     454:	7b 47       	sbci	r23, 0x7B	; 123
     456:	81 4e       	sbci	r24, 0xE1	; 225
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	f3 e0       	ldi	r31, 0x03	; 3
     45c:	66 0f       	add	r22, r22
     45e:	77 1f       	adc	r23, r23
     460:	88 1f       	adc	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	fa 95       	dec	r31
     466:	d1 f7       	brne	.-12     	; 0x45c <serial_init+0x14>
     468:	e4 e0       	ldi	r30, 0x04	; 4
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	44 1f       	adc	r20, r20
     470:	55 1f       	adc	r21, r21
     472:	ea 95       	dec	r30
     474:	d1 f7       	brne	.-12     	; 0x46a <serial_init+0x22>
     476:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodsi4>
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	30 40       	sbci	r19, 0x00	; 0
	
	
	
	UQFront=UQEnd=-1;
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	80 93 d1 00 	sts	0x00D1, r24
     484:	80 91 d1 00 	lds	r24, 0x00D1
     488:	80 93 d0 00 	sts	0x00D0, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
     48c:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
     48e:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     490:	86 e8       	ldi	r24, 0x86	; 134
     492:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     494:	88 e9       	ldi	r24, 0x98	; 152
     496:	8a b9       	out	0x0a, r24	; 10
	sei();
     498:	78 94       	sei

}
     49a:	08 95       	ret

0000049c <serial_finit>:

void serial_finit(uint16_t baudrate,uint8_t xtal)
{
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	26 2f       	mov	r18, r22
uint16_t ubrrvalue = (((xtal*1000000)+(baudrate*8L))/(baudrate*16L)-1);
     4a6:	7c 01       	movw	r14, r24
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	10 e0       	ldi	r17, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	ca 01       	movw	r24, r20
     4b4:	b9 01       	movw	r22, r18
     4b6:	28 e4       	ldi	r18, 0x48	; 72
     4b8:	38 ee       	ldi	r19, 0xE8	; 232
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__mulsi3>
     4c2:	6e 0d       	add	r22, r14
     4c4:	7f 1d       	adc	r23, r15
     4c6:	80 1f       	adc	r24, r16
     4c8:	91 1f       	adc	r25, r17
     4ca:	b3 e0       	ldi	r27, 0x03	; 3
     4cc:	66 0f       	add	r22, r22
     4ce:	77 1f       	adc	r23, r23
     4d0:	88 1f       	adc	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	ba 95       	dec	r27
     4d6:	d1 f7       	brne	.-12     	; 0x4cc <serial_finit+0x30>
     4d8:	a4 e0       	ldi	r26, 0x04	; 4
     4da:	ee 0c       	add	r14, r14
     4dc:	ff 1c       	adc	r15, r15
     4de:	00 1f       	adc	r16, r16
     4e0:	11 1f       	adc	r17, r17
     4e2:	aa 95       	dec	r26
     4e4:	d1 f7       	brne	.-12     	; 0x4da <serial_finit+0x3e>
     4e6:	a8 01       	movw	r20, r16
     4e8:	97 01       	movw	r18, r14
     4ea:	0e 94 a6 12 	call	0x254c	; 0x254c <__divmodsi4>
     4ee:	21 50       	subi	r18, 0x01	; 1
     4f0:	30 40       	sbci	r19, 0x00	; 0
	
	UQFront=UQEnd=-1;
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	80 93 d1 00 	sts	0x00D1, r24
     4f8:	80 91 d1 00 	lds	r24, 0x00D1
     4fc:	80 93 d0 00 	sts	0x00D0, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
     500:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
     502:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     504:	86 e8       	ldi	r24, 0x86	; 134
     506:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     508:	88 e9       	ldi	r24, 0x98	; 152
     50a:	8a b9       	out	0x0a, r24	; 10
	sei();
     50c:	78 94       	sei

}
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <serial_read>:
unsigned char serial_read()
{
	char data;
	
	
	if(UQFront==-1)
     518:	80 91 d0 00 	lds	r24, 0x00D0
     51c:	8f 3f       	cpi	r24, 0xFF	; 255
     51e:	11 f4       	brne	.+4      	; 0x524 <serial_read+0xc>
     520:	e0 e0       	ldi	r30, 0x00	; 0
     522:	1d c0       	rjmp	.+58     	; 0x55e <serial_read+0x46>
		return 0;
	
	data=URBuff[UQFront];
     524:	e0 91 d0 00 	lds	r30, 0x00D0
     528:	ff 27       	eor	r31, r31
     52a:	e7 fd       	sbrc	r30, 7
     52c:	f0 95       	com	r31
     52e:	ee 52       	subi	r30, 0x2E	; 46
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
     534:	90 91 d0 00 	lds	r25, 0x00D0
     538:	80 91 d1 00 	lds	r24, 0x00D1
     53c:	98 17       	cp	r25, r24
     53e:	41 f4       	brne	.+16     	; 0x550 <serial_read+0x38>
	{
	
	UQFront=UQEnd=-1;
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	80 93 d1 00 	sts	0x00D1, r24
     546:	80 91 d1 00 	lds	r24, 0x00D1
     54a:	80 93 d0 00 	sts	0x00D0, r24
     54e:	07 c0       	rjmp	.+14     	; 0x55e <serial_read+0x46>
	}
	else
	{
		UQFront++;
     550:	80 91 d0 00 	lds	r24, 0x00D0
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	80 93 d0 00 	sts	0x00D0, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
     55a:	80 91 d0 00 	lds	r24, 0x00D0
		UQFront=0;
	}

	return data;
}
     55e:	8e 2f       	mov	r24, r30
     560:	08 95       	ret

00000562 <serial_char>:

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     562:	5d 9b       	sbis	0x0b, 5	; 11
     564:	fe cf       	rjmp	.-4      	; 0x562 <serial_char>

	
	UDR=data;
     566:	8c b9       	out	0x0c, r24	; 12
}
     568:	08 95       	ret

0000056a <serial_string>:
}



void serial_string(char *str)
{
     56a:	fc 01       	movw	r30, r24
     56c:	04 c0       	rjmp	.+8      	; 0x576 <serial_string+0xc>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     56e:	5d 9b       	sbis	0x0b, 5	; 11
     570:	fe cf       	rjmp	.-4      	; 0x56e <serial_string+0x4>

	
	UDR=data;
     572:	8c b9       	out	0x0c, r24	; 12
void serial_string(char *str)
{
	while((*str)!='\0')
	{
		serial_char(*str);
		str++;
     574:	31 96       	adiw	r30, 0x01	; 1



void serial_string(char *str)
{
	while((*str)!='\0')
     576:	80 81       	ld	r24, Z
     578:	88 23       	and	r24, r24
     57a:	c9 f7       	brne	.-14     	; 0x56e <serial_string+0x4>
	{
		serial_char(*str);
		str++;
	}
}
     57c:	08 95       	ret

0000057e <serial_string_P>:


void serial_string_P(const char *progmem_s)
{
     57e:	03 c0       	rjmp	.+6      	; 0x586 <serial_string_P+0x8>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     580:	5d 9b       	sbis	0x0b, 5	; 11
     582:	fe cf       	rjmp	.-4      	; 0x580 <serial_string_P+0x2>

	
	UDR=data;
     584:	2c b9       	out	0x0c, r18	; 12
     586:	fc 01       	movw	r30, r24

register char c;

	
	
	while ( (c = pgm_read_byte(progmem_s++))!='\0' ) {
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	24 91       	lpm	r18, Z+
     58c:	22 23       	and	r18, r18
     58e:	c1 f7       	brne	.-16     	; 0x580 <serial_string_P+0x2>
       serial_char(c);
		//progmem_s++;
    }
	
}
     590:	08 95       	ret

00000592 <s_readbuffer>:


void s_readbuffer(void *buff,uint16_t len)
{
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	7c 01       	movw	r14, r24
     5a0:	8b 01       	movw	r16, r22
     5a2:	c0 e0       	ldi	r28, 0x00	; 0
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <s_readbuffer+0x24>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=serial_read();
     5a8:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
     5ac:	f7 01       	movw	r30, r14
     5ae:	ec 0f       	add	r30, r28
     5b0:	fd 1f       	adc	r31, r29
     5b2:	80 83       	st	Z, r24


void s_readbuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
     5b4:	21 96       	adiw	r28, 0x01	; 1
     5b6:	c0 17       	cp	r28, r16
     5b8:	d1 07       	cpc	r29, r17
     5ba:	b0 f3       	brcs	.-20     	; 0x5a8 <s_readbuffer+0x16>
	{
		((char*)buff)[i]=serial_read();
	}
}
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	08 95       	ret

000005ca <serial_available>:

uint8_t serial_available()
{
	if(UQFront==-1) return 0;
     5ca:	80 91 d0 00 	lds	r24, 0x00D0
     5ce:	8f 3f       	cpi	r24, 0xFF	; 255
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <serial_available+0xc>
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	1a c0       	rjmp	.+52     	; 0x60a <serial_available+0x40>
	if(UQFront<UQEnd)
     5d6:	90 91 d0 00 	lds	r25, 0x00D0
     5da:	80 91 d1 00 	lds	r24, 0x00D1
     5de:	98 17       	cp	r25, r24
     5e0:	34 f4       	brge	.+12     	; 0x5ee <serial_available+0x24>
		return(UQEnd-UQFront+1);
     5e2:	90 91 d1 00 	lds	r25, 0x00D1
     5e6:	80 91 d0 00 	lds	r24, 0x00D0
     5ea:	9f 5f       	subi	r25, 0xFF	; 255
     5ec:	0d c0       	rjmp	.+26     	; 0x608 <serial_available+0x3e>
	else if(UQFront>UQEnd)
     5ee:	90 91 d0 00 	lds	r25, 0x00D0
     5f2:	80 91 d1 00 	lds	r24, 0x00D1
     5f6:	89 17       	cp	r24, r25
     5f8:	14 f0       	brlt	.+4      	; 0x5fe <serial_available+0x34>
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <serial_available+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     5fe:	90 91 d1 00 	lds	r25, 0x00D1
     602:	80 91 d0 00 	lds	r24, 0x00D0
     606:	93 5d       	subi	r25, 0xD3	; 211
     608:	98 1b       	sub	r25, r24
	else
		return 1;
}
     60a:	89 2f       	mov	r24, r25
     60c:	08 95       	ret

0000060e <s_clearbuffer>:




void s_clearbuffer()
{
     60e:	02 c0       	rjmp	.+4      	; 0x614 <s_clearbuffer+0x6>
	while(serial_available()>0)
	{
		serial_read();
     610:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>



void s_clearbuffer()
{
	while(serial_available()>0)
     614:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
     618:	88 23       	and	r24, r24
     61a:	d1 f7       	brne	.-12     	; 0x610 <s_clearbuffer+0x2>
	{
		serial_read();
	}
}
     61c:	08 95       	ret

0000061e <serial_nreadw>:




char serial_nreadw(char *msg,unsigned char length)
{
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
     626:	16 2f       	mov	r17, r22

   while(serial_available()<length);		
     628:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
     62c:	81 17       	cp	r24, r17
     62e:	e0 f3       	brcs	.-8      	; 0x628 <serial_nreadw+0xa>
	s_readbuffer(msg,length);
     630:	ce 01       	movw	r24, r28
     632:	61 2f       	mov	r22, r17
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 c9 02 	call	0x592	; 0x592 <s_readbuffer>
	return 1;
	
}
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	08 95       	ret

00000644 <serial_nread>:


char serial_nread(char *msg,unsigned char length)
{
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
     64c:	16 2f       	mov	r17, r22

  if(serial_available()>=length)
     64e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
     652:	81 17       	cp	r24, r17
     654:	38 f0       	brcs	.+14     	; 0x664 <serial_nread+0x20>
{	
	s_readbuffer(msg,length);
     656:	ce 01       	movw	r24, r28
     658:	61 2f       	mov	r22, r17
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	0e 94 c9 02 	call	0x592	; 0x592 <s_readbuffer>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	02 c0       	rjmp	.+4      	; 0x668 <serial_nread+0x24>
	return 1;
	
}
else{
       msg[0]='\0';
     664:	18 82       	st	Y, r1
     666:	80 e0       	ldi	r24, 0x00	; 0
	  return 0;
}


	
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	08 95       	ret

00000670 <__vector_13>:




ISR(USART_RXC_VECT)
{
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	2f 93       	push	r18
     67c:	3f 93       	push	r19
     67e:	4f 93       	push	r20
     680:	8f 93       	push	r24
     682:	9f 93       	push	r25
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
	
	char data=UDR;
     688:	4c b1       	in	r20, 0x0c	; 12

	

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     68a:	80 91 d1 00 	lds	r24, 0x00D1
     68e:	80 91 d1 00 	lds	r24, 0x00D1
     692:	20 91 d0 00 	lds	r18, 0x00D0
     696:	99 27       	eor	r25, r25
     698:	87 fd       	sbrc	r24, 7
     69a:	90 95       	com	r25
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	33 27       	eor	r19, r19
     6a0:	27 fd       	sbrc	r18, 7
     6a2:	30 95       	com	r19
     6a4:	82 17       	cp	r24, r18
     6a6:	93 07       	cpc	r25, r19
     6a8:	39 f4       	brne	.+14     	; 0x6b8 <__vector_13+0x48>
	{
		
		UQFront++;
     6aa:	80 91 d0 00 	lds	r24, 0x00D0
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
     6b0:	80 93 d0 00 	sts	0x00D0, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     6b4:	80 91 d0 00 	lds	r24, 0x00D0
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     6b8:	80 91 d1 00 	lds	r24, 0x00D1
		UQEnd=0;
	else
		UQEnd++;
     6bc:	80 91 d1 00 	lds	r24, 0x00D1
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	80 93 d1 00 	sts	0x00D1, r24


	URBuff[UQEnd]=data;
     6c6:	e0 91 d1 00 	lds	r30, 0x00D1
     6ca:	ff 27       	eor	r31, r31
     6cc:	e7 fd       	sbrc	r30, 7
     6ce:	f0 95       	com	r31
     6d0:	ee 52       	subi	r30, 0x2E	; 46
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     6d6:	80 91 d0 00 	lds	r24, 0x00D0
     6da:	8f 3f       	cpi	r24, 0xFF	; 255
     6dc:	11 f4       	brne	.+4      	; 0x6e2 <__vector_13+0x72>
     6de:	10 92 d0 00 	sts	0x00D0, r1

}
     6e2:	ff 91       	pop	r31
     6e4:	ef 91       	pop	r30
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	4f 91       	pop	r20
     6ec:	3f 91       	pop	r19
     6ee:	2f 91       	pop	r18
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <urclear>:



void urclear()
{
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
   for(int i=0;i<128;i++)
   {
      URBuff[i]='\0';
     6fe:	fc 01       	movw	r30, r24
     700:	ee 52       	subi	r30, 0x2E	; 46
     702:	ff 4f       	sbci	r31, 0xFF	; 255
     704:	10 82       	st	Z, r1



void urclear()
{
   for(int i=0;i<128;i++)
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	80 38       	cpi	r24, 0x80	; 128
     70a:	91 05       	cpc	r25, r1
     70c:	c1 f7       	brne	.-16     	; 0x6fe <urclear+0x4>
   {
      URBuff[i]='\0';
   } 

}
     70e:	08 95       	ret

00000710 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     710:	66 23       	and	r22, r22
     712:	11 f0       	breq	.+4      	; 0x718 <lcd_write+0x8>
       lcd_rs_high();
     714:	dc 9a       	sbi	0x1b, 4	; 27
     716:	01 c0       	rjmp	.+2      	; 0x71a <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     718:	dc 98       	cbi	0x1b, 4	; 27
    }
    lcd_rw_low();
     71a:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     71c:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     71e:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     720:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     722:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     724:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     726:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     728:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     72a:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     72c:	87 fd       	sbrc	r24, 7
     72e:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     730:	86 fd       	sbrc	r24, 6
     732:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     734:	85 fd       	sbrc	r24, 5
     736:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     738:	84 fd       	sbrc	r24, 4
     73a:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     73c:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     73e:	00 c0       	rjmp	.+0      	; 0x740 <lcd_write+0x30>
    lcd_e_low();
     740:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     742:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     744:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     746:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     748:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     74a:	83 fd       	sbrc	r24, 3
     74c:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     74e:	82 fd       	sbrc	r24, 2
     750:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     752:	81 fd       	sbrc	r24, 1
     754:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     756:	80 fd       	sbrc	r24, 0
     758:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     75a:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     75c:	00 c0       	rjmp	.+0      	; 0x75e <lcd_write+0x4e>
    lcd_e_low();
     75e:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     760:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     762:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     764:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     766:	af 9a       	sbi	0x15, 7	; 21
    }
}
     768:	08 95       	ret

0000076a <lcd_waitbusy>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	97 e2       	ldi	r25, 0x27	; 39
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <lcd_waitbusy+0x4>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <lcd_waitbusy+0xc>
     77a:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
     77c:	dd 9a       	sbi	0x1b, 5	; 27
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     77e:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     780:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     782:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     784:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
     786:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();        
     788:	00 c0       	rjmp	.+0      	; 0x78a <lcd_waitbusy+0x20>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     78a:	9c 9b       	sbis	0x13, 4	; 19
     78c:	02 c0       	rjmp	.+4      	; 0x792 <lcd_waitbusy+0x28>
     78e:	80 e1       	ldi	r24, 0x10	; 16
     790:	01 c0       	rjmp	.+2      	; 0x794 <lcd_waitbusy+0x2a>
     792:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     794:	9d 99       	sbic	0x13, 5	; 19
     796:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     798:	9e 99       	sbic	0x13, 6	; 19
     79a:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     79c:	9f 99       	sbic	0x13, 7	; 19
     79e:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     7a0:	de 98       	cbi	0x1b, 6	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <lcd_waitbusy+0x3a>
    
        /* read low nibble */    
        lcd_e_high();
     7a4:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <lcd_waitbusy+0x3e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     7a8:	9c 99       	sbic	0x13, 4	; 19
     7aa:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     7ac:	9d 99       	sbic	0x13, 5	; 19
     7ae:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     7b0:	9e 99       	sbic	0x13, 6	; 19
     7b2:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     7b4:	9f 99       	sbic	0x13, 7	; 19
     7b6:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     7b8:	de 98       	cbi	0x1b, 6	; 27
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    
}/* lcd_waitbusy */
     7ba:	08 95       	ret

000007bc <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     7bc:	1f 93       	push	r17
     7be:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     7c0:	0e 94 b5 03 	call	0x76a	; 0x76a <lcd_waitbusy>
    lcd_write(cmd,0);
     7c4:	81 2f       	mov	r24, r17
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	0e 94 88 03 	call	0x710	; 0x710 <lcd_write>
}
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     7d0:	1f 93       	push	r17
     7d2:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     7d4:	0e 94 b5 03 	call	0x76a	; 0x76a <lcd_waitbusy>
    lcd_write(data,1);
     7d8:	81 2f       	mov	r24, r17
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	0e 94 88 03 	call	0x710	; 0x710 <lcd_write>
}
     7e0:	1f 91       	pop	r17
     7e2:	08 95       	ret

000007e4 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     7e4:	66 23       	and	r22, r22
     7e6:	11 f4       	brne	.+4      	; 0x7ec <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     7e8:	80 58       	subi	r24, 0x80	; 128
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     7ec:	80 54       	subi	r24, 0x40	; 64
     7ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>
     7f2:	08 95       	ret

000007f4 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     7f4:	0e 94 b5 03 	call	0x76a	; 0x76a <lcd_waitbusy>
}
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	08 95       	ret

000007fc <lcd_clear>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clear(void)
{
    lcd_command(1<<LCD_CLR);
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>
}
     802:	08 95       	ret

00000804 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>
}
     80a:	08 95       	ret

0000080c <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     80c:	1f 93       	push	r17
     80e:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     810:	0e 94 b5 03 	call	0x76a	; 0x76a <lcd_waitbusy>
    if (c=='\n')
     814:	1a 30       	cpi	r17, 0x0A	; 10
     816:	49 f4       	brne	.+18     	; 0x82a <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     818:	80 34       	cpi	r24, 0x40	; 64
     81a:	10 f0       	brcs	.+4      	; 0x820 <lcd_putc+0x14>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	01 c0       	rjmp	.+2      	; 0x822 <lcd_putc+0x16>
     820:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     822:	80 58       	subi	r24, 0x80	; 128
     824:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>
     828:	04 c0       	rjmp	.+8      	; 0x832 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     82a:	81 2f       	mov	r24, r17
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	0e 94 88 03 	call	0x710	; 0x710 <lcd_write>
    }

}/* lcd_putc */
     832:	1f 91       	pop	r17
     834:	08 95       	ret

00000836 <lcd_string>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	02 c0       	rjmp	.+4      	; 0x842 <lcd_string+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     83e:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_putc>
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     842:	89 91       	ld	r24, Y+
     844:	88 23       	and	r24, r24
     846:	d9 f7       	brne	.-10     	; 0x83e <lcd_string+0x8>
        lcd_putc(c);
    }

}/* lcd_string */
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	02 c0       	rjmp	.+4      	; 0x85a <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     856:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_putc>
     85a:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     85c:	21 96       	adiw	r28, 0x01	; 1
     85e:	84 91       	lpm	r24, Z+
     860:	88 23       	and	r24, r24
     862:	c9 f7       	brne	.-14     	; 0x856 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <lcd_string_P>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_string_P(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
     870:	02 c0       	rjmp	.+4      	; 0x876 <lcd_string_P+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     872:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_putc>
     876:	fe 01       	movw	r30, r28
void lcd_string_P(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	84 91       	lpm	r24, Z+
     87c:	88 23       	and	r24, r24
     87e:	c9 f7       	brne	.-14     	; 0x872 <lcd_string_P+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <lcd_init>:
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     886:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     888:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     88a:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     88c:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     88e:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     890:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     892:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	9d e7       	ldi	r25, 0x7D	; 125
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     89c:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     89e:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     8a0:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <lcd_init+0x1e>
    lcd_e_low();
     8a4:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	97 e2       	ldi	r25, 0x27	; 39
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <lcd_init+0x24>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     8ae:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <lcd_init+0x2c>
    lcd_e_low();
     8b2:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	fc 01       	movw	r30, r24
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <lcd_init+0x34>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     8be:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <lcd_init+0x3c>
    lcd_e_low();
     8c2:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     8c4:	fc 01       	movw	r30, r24
     8c6:	31 97       	sbiw	r30, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     8ca:	ac 98       	cbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     8cc:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <lcd_init+0x4a>
    lcd_e_low();
     8d0:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     8d6:	88 e2       	ldi	r24, 0x28	; 40
     8d8:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>
    lcd_clear();                           /* display clear                */ 
     8e2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_clear>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     8e6:	86 e0       	ldi	r24, 0x06	; 6
     8e8:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     8ec:	8c e0       	ldi	r24, 0x0C	; 12
     8ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd_command>

}/* lcd_init */
     8f2:	08 95       	ret

000008f4 <beep>:
#include "lcd.h"


void beep()
{
	write(porta,3,h);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	63 e0       	ldi	r22, 0x03	; 3
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	0e 94 29 06 	call	0xc52	; 0xc52 <write>
     904:	88 eb       	ldi	r24, 0xB8	; 184
     906:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     908:	20 e9       	ldi	r18, 0x90	; 144
     90a:	31 e0       	ldi	r19, 0x01	; 1
     90c:	f9 01       	movw	r30, r18
     90e:	31 97       	sbiw	r30, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <beep+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     912:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     914:	d9 f7       	brne	.-10     	; 0x90c <beep+0x18>
	_delay_ms(300);
	write(porta,3,l);
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	63 e0       	ldi	r22, 0x03	; 3
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	0e 94 29 06 	call	0xc52	; 0xc52 <write>
}
     926:	08 95       	ret

00000928 <main>:

int main()
{
     928:	4f 92       	push	r4
     92a:	5f 92       	push	r5
     92c:	6f 92       	push	r6
     92e:	7f 92       	push	r7
     930:	8f 92       	push	r8
     932:	9f 92       	push	r9
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	c0 5a       	subi	r28, 0xA0	; 160
     94e:	d0 40       	sbci	r29, 0x00	; 0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61

	beep();
     95a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <beep>
	char url[120],response[10];

	serial_init(9600);
     95e:	80 e8       	ldi	r24, 0x80	; 128
     960:	95 e2       	ldi	r25, 0x25	; 37
     962:	0e 94 24 02 	call	0x448	; 0x448 <serial_init>
	serial_select(3);
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 66 07 	call	0xecc	; 0xecc <serial_select>

	lcd_init();
     96e:	0e 94 43 04 	call	0x886	; 0x886 <lcd_init>

	lcd_string_P(PSTR("GPS Tracker"));
     972:	84 e5       	ldi	r24, 0x54	; 84
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 35 04 	call	0x86a	; 0x86a <lcd_string_P>

		set_timeout(30);	//Auto Reset If code gets blocked for more than 30 seconds
     97a:	8e e1       	ldi	r24, 0x1E	; 30
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 17 12 	call	0x242e	; 0x242e <set_timeout>

	gsm_init();
     982:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <gsm_init>
	
		reset_timeout();
     986:	0e 94 08 12 	call	0x2410	; 0x2410 <reset_timeout>

	gprs_init();   
     98a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <gprs_init>
	
		reset_timeout();
     98e:	0e 94 08 12 	call	0x2410	; 0x2410 <reset_timeout>

	agps_init();
     992:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <agps_init>

	//gps_init();
	
		reset_timeout();
     996:	0e 94 08 12 	call	0x2410	; 0x2410 <reset_timeout>

	gprs_connect();
     99a:	0e 94 88 09 	call	0x1310	; 0x1310 <gprs_connect>
	
		reset_timeout();
     99e:	0e 94 08 12 	call	0x2410	; 0x2410 <reset_timeout>
     9a2:	40 e9       	ldi	r20, 0x90	; 144
     9a4:	c4 2e       	mov	r12, r20
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	d4 2e       	mov	r13, r20
		if(gps_fix()==1)
		{
		
			reset_timeout();
			
			gps_getcoordinates(lat,lon,speed);
     9aa:	3b e0       	ldi	r19, 0x0B	; 11
     9ac:	e3 2e       	mov	r14, r19
     9ae:	f1 2c       	mov	r15, r1
     9b0:	ec 0e       	add	r14, r28
     9b2:	fd 1e       	adc	r15, r29
     9b4:	8e 01       	movw	r16, r28
     9b6:	0b 5e       	subi	r16, 0xEB	; 235
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	2f e1       	ldi	r18, 0x1F	; 31
     9bc:	62 2e       	mov	r6, r18
     9be:	71 2c       	mov	r7, r1
     9c0:	6c 0e       	add	r6, r28
     9c2:	7d 1e       	adc	r7, r29
			lcd_gotoxy(0,1);
			lcd_string(lon);
			
			reset_timeout();
		
			sprintf(url,"api.clobous.com/Zck77/track?&lat=%s&long=%s&speed=%s",lat,lon,speed);
     9c4:	99 e2       	ldi	r25, 0x29	; 41
     9c6:	89 2e       	mov	r8, r25
     9c8:	91 2c       	mov	r9, r1
     9ca:	8c 0e       	add	r8, r28
     9cc:	9d 1e       	adc	r9, r29
     9ce:	80 e6       	ldi	r24, 0x60	; 96
     9d0:	48 2e       	mov	r4, r24
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	58 2e       	mov	r5, r24
		 
			http_get(url,response);
     9d6:	5e 01       	movw	r10, r28
     9d8:	08 94       	sec
     9da:	a1 1c       	adc	r10, r1
     9dc:	b1 1c       	adc	r11, r1

	while (1)
	{
           		

		if(gps_fix()==1)
     9de:	0e 94 5f 0b 	call	0x16be	; 0x16be <gps_fix>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <main+0xc0>
     9e6:	4d c0       	rjmp	.+154    	; 0xa82 <main+0x15a>
		{
		
			reset_timeout();
     9e8:	0e 94 08 12 	call	0x2410	; 0x2410 <reset_timeout>
			
			gps_getcoordinates(lat,lon,speed);
     9ec:	c7 01       	movw	r24, r14
     9ee:	b8 01       	movw	r22, r16
     9f0:	a3 01       	movw	r20, r6
     9f2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <gps_getcoordinates>
		  
			lcd_clear();
     9f6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_clear>
			lcd_string(lat);
     9fa:	c7 01       	movw	r24, r14
     9fc:	0e 94 1b 04 	call	0x836	; 0x836 <lcd_string>
			lcd_gotoxy(0,1);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <lcd_gotoxy>
			lcd_string(lon);
     a08:	c8 01       	movw	r24, r16
     a0a:	0e 94 1b 04 	call	0x836	; 0x836 <lcd_string>
			
			reset_timeout();
     a0e:	0e 94 08 12 	call	0x2410	; 0x2410 <reset_timeout>
		
			sprintf(url,"api.clobous.com/Zck77/track?&lat=%s&long=%s&speed=%s",lat,lon,speed);
     a12:	8d b7       	in	r24, 0x3d	; 61
     a14:	9e b7       	in	r25, 0x3e	; 62
     a16:	0a 97       	sbiw	r24, 0x0a	; 10
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	9e bf       	out	0x3e, r25	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	8d bf       	out	0x3d, r24	; 61
     a22:	ed b7       	in	r30, 0x3d	; 61
     a24:	fe b7       	in	r31, 0x3e	; 62
     a26:	31 96       	adiw	r30, 0x01	; 1
     a28:	ad b7       	in	r26, 0x3d	; 61
     a2a:	be b7       	in	r27, 0x3e	; 62
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	9c 92       	st	X, r9
     a30:	8e 92       	st	-X, r8
     a32:	11 97       	sbiw	r26, 0x01	; 1
     a34:	53 82       	std	Z+3, r5	; 0x03
     a36:	42 82       	std	Z+2, r4	; 0x02
     a38:	f5 82       	std	Z+5, r15	; 0x05
     a3a:	e4 82       	std	Z+4, r14	; 0x04
     a3c:	17 83       	std	Z+7, r17	; 0x07
     a3e:	06 83       	std	Z+6, r16	; 0x06
     a40:	71 86       	std	Z+9, r7	; 0x09
     a42:	60 86       	std	Z+8, r6	; 0x08
     a44:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <sprintf>
		 
			http_get(url,response);
     a48:	8d b7       	in	r24, 0x3d	; 61
     a4a:	9e b7       	in	r25, 0x3e	; 62
     a4c:	0a 96       	adiw	r24, 0x0a	; 10
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	9e bf       	out	0x3e, r25	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	8d bf       	out	0x3d, r24	; 61
     a58:	c4 01       	movw	r24, r8
     a5a:	b5 01       	movw	r22, r10
     a5c:	0e 94 99 0a 	call	0x1532	; 0x1532 <http_get>
			
			reset_timeout();
     a60:	0e 94 08 12 	call	0x2410	; 0x2410 <reset_timeout>
			
				lcd_clear();
     a64:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_clear>
				lcd_string(response);
     a68:	c5 01       	movw	r24, r10
     a6a:	0e 94 1b 04 	call	0x836	; 0x836 <lcd_string>
     a6e:	80 e1       	ldi	r24, 0x10	; 16
     a70:	97 e2       	ldi	r25, 0x27	; 39
     a72:	f6 01       	movw	r30, r12
     a74:	31 97       	sbiw	r30, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <main+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7a:	d9 f7       	brne	.-10     	; 0xa72 <main+0x14a>
     a7c:	28 e8       	ldi	r18, 0x88	; 136
     a7e:	33 e1       	ldi	r19, 0x13	; 19
     a80:	0e c0       	rjmp	.+28     	; 0xa9e <main+0x176>
				_delay_ms(1000);
		}
		
		else{
				lcd_clear();
     a82:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_clear>
				lcd_string("NO GPS FIX");
     a86:	85 e9       	ldi	r24, 0x95	; 149
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 1b 04 	call	0x836	; 0x836 <lcd_string>
     a8e:	84 ef       	ldi	r24, 0xF4	; 244
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	f6 01       	movw	r30, r12
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <main+0x16c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a9a:	d9 f7       	brne	.-10     	; 0xa92 <main+0x16a>
     a9c:	ef cf       	rjmp	.-34     	; 0xa7c <main+0x154>
     a9e:	c6 01       	movw	r24, r12
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <main+0x178>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa4:	21 50       	subi	r18, 0x01	; 1
     aa6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa8:	09 f4       	brne	.+2      	; 0xaac <main+0x184>
     aaa:	99 cf       	rjmp	.-206    	; 0x9de <main+0xb6>
     aac:	f8 cf       	rjmp	.-16     	; 0xa9e <main+0x176>

00000aae <lcd_num>:

/*************************************************************************
Snumber display
*************************************************************************/
void lcd_num(long num)
{
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	df 93       	push	r29
     ab4:	cf 93       	push	r28
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	27 97       	sbiw	r28, 0x07	; 7
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
char buffer[7];

 ltoa( num , buffer, 10);
     ac6:	8e 01       	movw	r16, r28
     ac8:	0f 5f       	subi	r16, 0xFF	; 255
     aca:	1f 4f       	sbci	r17, 0xFF	; 255
     acc:	a8 01       	movw	r20, r16
     ace:	2a e0       	ldi	r18, 0x0A	; 10
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	0e 94 a4 13 	call	0x2748	; 0x2748 <ltoa>
    lcd_string(buffer);
     ad6:	c8 01       	movw	r24, r16
     ad8:	0e 94 1b 04 	call	0x836	; 0x836 <lcd_string>
}
     adc:	27 96       	adiw	r28, 0x07	; 7
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <serial_numl>:
}



void serial_numl(long num)
{
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	df 93       	push	r29
     af8:	cf 93       	push	r28
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	27 97       	sbiw	r28, 0x07	; 7
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 ltoa( num , buffer, 10);
     b0a:	8e 01       	movw	r16, r28
     b0c:	0f 5f       	subi	r16, 0xFF	; 255
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	a8 01       	movw	r20, r16
     b12:	2a e0       	ldi	r18, 0x0A	; 10
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	0e 94 a4 13 	call	0x2748	; 0x2748 <ltoa>
    serial_string(buffer);
     b1a:	c8 01       	movw	r24, r16
     b1c:	0e 94 b5 02 	call	0x56a	; 0x56a <serial_string>
}
     b20:	27 96       	adiw	r28, 0x07	; 7
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	cf 91       	pop	r28
     b2e:	df 91       	pop	r29
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <serial_num>:

void serial_num(int num)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	27 97       	sbiw	r28, 0x07	; 7
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 itoa( num , buffer, 10);
     b4e:	8e 01       	movw	r16, r28
     b50:	0f 5f       	subi	r16, 0xFF	; 255
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	b8 01       	movw	r22, r16
     b56:	4a e0       	ldi	r20, 0x0A	; 10
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	0e 94 83 13 	call	0x2706	; 0x2706 <itoa>
    serial_string(buffer);
     b5e:	c8 01       	movw	r24, r16
     b60:	0e 94 b5 02 	call	0x56a	; 0x56a <serial_string>
}
     b64:	27 96       	adiw	r28, 0x07	; 7
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <read>:
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	f9 f0       	breq	.+62     	; 0xbbc <read+0x42>
     b7e:	83 30       	cpi	r24, 0x03	; 3
     b80:	18 f4       	brcc	.+6      	; 0xb88 <read+0xe>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	31 f4       	brne	.+12     	; 0xb92 <read+0x18>
     b86:	07 c0       	rjmp	.+14     	; 0xb96 <read+0x1c>
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	59 f1       	breq	.+86     	; 0xbe2 <read+0x68>
     b8c:	84 30       	cpi	r24, 0x04	; 4
     b8e:	09 f4       	brne	.+2      	; 0xb92 <read+0x18>
     b90:	42 c0       	rjmp	.+132    	; 0xc16 <read+0x9c>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	08 95       	ret
     b96:	69 30       	cpi	r22, 0x09	; 9
     b98:	19 f4       	brne	.+6      	; 0xba0 <read+0x26>
     b9a:	1a ba       	out	0x1a, r1	; 26
     b9c:	89 b3       	in	r24, 0x19	; 25
     b9e:	08 95       	ret
     ba0:	8a b3       	in	r24, 0x1a	; 26
     ba2:	21 e0       	ldi	r18, 0x01	; 1
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	06 2e       	mov	r0, r22
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <read+0x34>
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	0a 94       	dec	r0
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <read+0x30>
     bb2:	20 95       	com	r18
     bb4:	28 23       	and	r18, r24
     bb6:	2a bb       	out	0x1a, r18	; 26
     bb8:	89 b3       	in	r24, 0x19	; 25
     bba:	25 c0       	rjmp	.+74     	; 0xc06 <read+0x8c>
     bbc:	69 30       	cpi	r22, 0x09	; 9
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <read+0x4c>
     bc0:	17 ba       	out	0x17, r1	; 23
     bc2:	86 b3       	in	r24, 0x16	; 22
     bc4:	08 95       	ret
     bc6:	87 b3       	in	r24, 0x17	; 23
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	06 2e       	mov	r0, r22
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <read+0x5a>
     bd0:	22 0f       	add	r18, r18
     bd2:	33 1f       	adc	r19, r19
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <read+0x56>
     bd8:	20 95       	com	r18
     bda:	28 23       	and	r18, r24
     bdc:	27 bb       	out	0x17, r18	; 23
     bde:	86 b3       	in	r24, 0x16	; 22
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <read+0x8c>
     be2:	69 30       	cpi	r22, 0x09	; 9
     be4:	19 f4       	brne	.+6      	; 0xbec <read+0x72>
     be6:	14 ba       	out	0x14, r1	; 20
     be8:	83 b3       	in	r24, 0x13	; 19
     bea:	08 95       	ret
     bec:	84 b3       	in	r24, 0x14	; 20
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	06 2e       	mov	r0, r22
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <read+0x80>
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <read+0x7c>
     bfe:	20 95       	com	r18
     c00:	28 23       	and	r18, r24
     c02:	24 bb       	out	0x14, r18	; 20
     c04:	83 b3       	in	r24, 0x13	; 19
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <read+0x94>
     c0a:	95 95       	asr	r25
     c0c:	87 95       	ror	r24
     c0e:	6a 95       	dec	r22
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <read+0x90>
     c12:	81 70       	andi	r24, 0x01	; 1
     c14:	08 95       	ret
     c16:	69 30       	cpi	r22, 0x09	; 9
     c18:	19 f4       	brne	.+6      	; 0xc20 <read+0xa6>
     c1a:	11 ba       	out	0x11, r1	; 17
     c1c:	80 b3       	in	r24, 0x10	; 16
     c1e:	08 95       	ret
     c20:	31 b3       	in	r19, 0x11	; 17
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	06 2e       	mov	r0, r22
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <read+0xb4>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	0a 94       	dec	r0
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <read+0xb0>
     c32:	28 2f       	mov	r18, r24
     c34:	20 95       	com	r18
     c36:	23 23       	and	r18, r19
     c38:	21 bb       	out	0x11, r18	; 17
     c3a:	22 b3       	in	r18, 0x12	; 18
     c3c:	82 2b       	or	r24, r18
     c3e:	82 bb       	out	0x12, r24	; 18
     c40:	80 b3       	in	r24, 0x10	; 16
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <read+0xd0>
     c46:	95 95       	asr	r25
     c48:	87 95       	ror	r24
     c4a:	6a 95       	dec	r22
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <read+0xcc>
     c4e:	81 70       	andi	r24, 0x01	; 1
     c50:	08 95       	ret

00000c52 <write>:
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	09 f4       	brne	.+2      	; 0xc58 <write+0x6>
     c56:	41 c0       	rjmp	.+130    	; 0xcda <write+0x88>
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	20 f4       	brcc	.+8      	; 0xc64 <write+0x12>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	09 f0       	breq	.+2      	; 0xc62 <write+0x10>
     c60:	d7 c0       	rjmp	.+430    	; 0xe10 <write+0x1be>
     c62:	07 c0       	rjmp	.+14     	; 0xc72 <write+0x20>
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	09 f4       	brne	.+2      	; 0xc6a <write+0x18>
     c68:	6c c0       	rjmp	.+216    	; 0xd42 <write+0xf0>
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	09 f0       	breq	.+2      	; 0xc70 <write+0x1e>
     c6e:	d0 c0       	rjmp	.+416    	; 0xe10 <write+0x1be>
     c70:	9c c0       	rjmp	.+312    	; 0xdaa <write+0x158>
     c72:	6b 35       	cpi	r22, 0x5B	; 91
     c74:	21 f4       	brne	.+8      	; 0xc7e <write+0x2c>
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	8a bb       	out	0x1a, r24	; 26
     c7a:	4b bb       	out	0x1b, r20	; 27
     c7c:	08 95       	ret
     c7e:	44 23       	and	r20, r20
     c80:	21 f0       	breq	.+8      	; 0xc8a <write+0x38>
     c82:	41 30       	cpi	r20, 0x01	; 1
     c84:	09 f0       	breq	.+2      	; 0xc88 <write+0x36>
     c86:	c4 c0       	rjmp	.+392    	; 0xe10 <write+0x1be>
     c88:	14 c0       	rjmp	.+40     	; 0xcb2 <write+0x60>
     c8a:	69 30       	cpi	r22, 0x09	; 9
     c8c:	21 f4       	brne	.+8      	; 0xc96 <write+0x44>
     c8e:	8f ef       	ldi	r24, 0xFF	; 255
     c90:	8a bb       	out	0x1a, r24	; 26
     c92:	1b ba       	out	0x1b, r1	; 27
     c94:	08 95       	ret
     c96:	8a b3       	in	r24, 0x1a	; 26
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <write+0x50>
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <write+0x4c>
     ca6:	82 2b       	or	r24, r18
     ca8:	8a bb       	out	0x1a, r24	; 26
     caa:	8b b3       	in	r24, 0x1b	; 27
     cac:	20 95       	com	r18
     cae:	28 23       	and	r18, r24
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <write+0x84>
     cb2:	69 30       	cpi	r22, 0x09	; 9
     cb4:	21 f4       	brne	.+8      	; 0xcbe <write+0x6c>
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	8a bb       	out	0x1a, r24	; 26
     cba:	8b bb       	out	0x1b, r24	; 27
     cbc:	08 95       	ret
     cbe:	8a b3       	in	r24, 0x1a	; 26
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <write+0x78>
     cc6:	22 0f       	add	r18, r18
     cc8:	33 1f       	adc	r19, r19
     cca:	6a 95       	dec	r22
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <write+0x74>
     cce:	82 2b       	or	r24, r18
     cd0:	8a bb       	out	0x1a, r24	; 26
     cd2:	8b b3       	in	r24, 0x1b	; 27
     cd4:	28 2b       	or	r18, r24
     cd6:	2b bb       	out	0x1b, r18	; 27
     cd8:	08 95       	ret
     cda:	6b 35       	cpi	r22, 0x5B	; 91
     cdc:	21 f4       	brne	.+8      	; 0xce6 <write+0x94>
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	87 bb       	out	0x17, r24	; 23
     ce2:	48 bb       	out	0x18, r20	; 24
     ce4:	08 95       	ret
     ce6:	44 23       	and	r20, r20
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <write+0xa0>
     cea:	41 30       	cpi	r20, 0x01	; 1
     cec:	09 f0       	breq	.+2      	; 0xcf0 <write+0x9e>
     cee:	90 c0       	rjmp	.+288    	; 0xe10 <write+0x1be>
     cf0:	14 c0       	rjmp	.+40     	; 0xd1a <write+0xc8>
     cf2:	69 30       	cpi	r22, 0x09	; 9
     cf4:	21 f4       	brne	.+8      	; 0xcfe <write+0xac>
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	87 bb       	out	0x17, r24	; 23
     cfa:	18 ba       	out	0x18, r1	; 24
     cfc:	08 95       	ret
     cfe:	87 b3       	in	r24, 0x17	; 23
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <write+0xb8>
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	6a 95       	dec	r22
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <write+0xb4>
     d0e:	82 2b       	or	r24, r18
     d10:	87 bb       	out	0x17, r24	; 23
     d12:	88 b3       	in	r24, 0x18	; 24
     d14:	20 95       	com	r18
     d16:	28 23       	and	r18, r24
     d18:	12 c0       	rjmp	.+36     	; 0xd3e <write+0xec>
     d1a:	69 30       	cpi	r22, 0x09	; 9
     d1c:	21 f4       	brne	.+8      	; 0xd26 <write+0xd4>
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	87 bb       	out	0x17, r24	; 23
     d22:	88 bb       	out	0x18, r24	; 24
     d24:	08 95       	ret
     d26:	87 b3       	in	r24, 0x17	; 23
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <write+0xe0>
     d2e:	22 0f       	add	r18, r18
     d30:	33 1f       	adc	r19, r19
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <write+0xdc>
     d36:	82 2b       	or	r24, r18
     d38:	87 bb       	out	0x17, r24	; 23
     d3a:	88 b3       	in	r24, 0x18	; 24
     d3c:	28 2b       	or	r18, r24
     d3e:	28 bb       	out	0x18, r18	; 24
     d40:	08 95       	ret
     d42:	6b 35       	cpi	r22, 0x5B	; 91
     d44:	21 f4       	brne	.+8      	; 0xd4e <write+0xfc>
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	84 bb       	out	0x14, r24	; 20
     d4a:	45 bb       	out	0x15, r20	; 21
     d4c:	08 95       	ret
     d4e:	44 23       	and	r20, r20
     d50:	21 f0       	breq	.+8      	; 0xd5a <write+0x108>
     d52:	41 30       	cpi	r20, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <write+0x106>
     d56:	5c c0       	rjmp	.+184    	; 0xe10 <write+0x1be>
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <write+0x130>
     d5a:	69 30       	cpi	r22, 0x09	; 9
     d5c:	21 f4       	brne	.+8      	; 0xd66 <write+0x114>
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	84 bb       	out	0x14, r24	; 20
     d62:	15 ba       	out	0x15, r1	; 21
     d64:	08 95       	ret
     d66:	84 b3       	in	r24, 0x14	; 20
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <write+0x120>
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	6a 95       	dec	r22
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <write+0x11c>
     d76:	82 2b       	or	r24, r18
     d78:	84 bb       	out	0x14, r24	; 20
     d7a:	85 b3       	in	r24, 0x15	; 21
     d7c:	20 95       	com	r18
     d7e:	28 23       	and	r18, r24
     d80:	12 c0       	rjmp	.+36     	; 0xda6 <write+0x154>
     d82:	69 30       	cpi	r22, 0x09	; 9
     d84:	21 f4       	brne	.+8      	; 0xd8e <write+0x13c>
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	84 bb       	out	0x14, r24	; 20
     d8a:	85 bb       	out	0x15, r24	; 21
     d8c:	08 95       	ret
     d8e:	84 b3       	in	r24, 0x14	; 20
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <write+0x148>
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	6a 95       	dec	r22
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <write+0x144>
     d9e:	82 2b       	or	r24, r18
     da0:	84 bb       	out	0x14, r24	; 20
     da2:	85 b3       	in	r24, 0x15	; 21
     da4:	28 2b       	or	r18, r24
     da6:	25 bb       	out	0x15, r18	; 21
     da8:	08 95       	ret
     daa:	6b 35       	cpi	r22, 0x5B	; 91
     dac:	21 f4       	brne	.+8      	; 0xdb6 <write+0x164>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	81 bb       	out	0x11, r24	; 17
     db2:	42 bb       	out	0x12, r20	; 18
     db4:	08 95       	ret
     db6:	44 23       	and	r20, r20
     db8:	19 f0       	breq	.+6      	; 0xdc0 <write+0x16e>
     dba:	41 30       	cpi	r20, 0x01	; 1
     dbc:	49 f5       	brne	.+82     	; 0xe10 <write+0x1be>
     dbe:	15 c0       	rjmp	.+42     	; 0xdea <write+0x198>
     dc0:	69 30       	cpi	r22, 0x09	; 9
     dc2:	21 f4       	brne	.+8      	; 0xdcc <write+0x17a>
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	81 bb       	out	0x11, r24	; 17
     dc8:	12 ba       	out	0x12, r1	; 18
     dca:	08 95       	ret
     dcc:	81 b3       	in	r24, 0x11	; 17
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <write+0x186>
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	6a 95       	dec	r22
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <write+0x182>
     ddc:	82 2b       	or	r24, r18
     dde:	81 bb       	out	0x11, r24	; 17
     de0:	82 b3       	in	r24, 0x12	; 18
     de2:	20 95       	com	r18
     de4:	28 23       	and	r18, r24
     de6:	22 bb       	out	0x12, r18	; 18
     de8:	08 95       	ret
     dea:	69 30       	cpi	r22, 0x09	; 9
     dec:	21 f4       	brne	.+8      	; 0xdf6 <write+0x1a4>
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	81 bb       	out	0x11, r24	; 17
     df2:	82 bb       	out	0x12, r24	; 18
     df4:	08 95       	ret
     df6:	81 b3       	in	r24, 0x11	; 17
     df8:	21 e0       	ldi	r18, 0x01	; 1
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <write+0x1b0>
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	6a 95       	dec	r22
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <write+0x1ac>
     e06:	82 2b       	or	r24, r18
     e08:	81 bb       	out	0x11, r24	; 17
     e0a:	82 b3       	in	r24, 0x12	; 18
     e0c:	28 2b       	or	r18, r24
     e0e:	22 bb       	out	0x12, r18	; 18
     e10:	08 95       	ret

00000e12 <direction>:
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	19 f1       	breq	.+70     	; 0xe5c <direction+0x4a>
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	09 f4       	brne	.+2      	; 0xe1c <direction+0xa>
     e1a:	3c c0       	rjmp	.+120    	; 0xe94 <direction+0x82>
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	09 f0       	breq	.+2      	; 0xe22 <direction+0x10>
     e20:	54 c0       	rjmp	.+168    	; 0xeca <direction+0xb8>
     e22:	44 23       	and	r20, r20
     e24:	21 f0       	breq	.+8      	; 0xe2e <direction+0x1c>
     e26:	41 30       	cpi	r20, 0x01	; 1
     e28:	09 f0       	breq	.+2      	; 0xe2c <direction+0x1a>
     e2a:	4f c0       	rjmp	.+158    	; 0xeca <direction+0xb8>
     e2c:	0c c0       	rjmp	.+24     	; 0xe46 <direction+0x34>
     e2e:	27 b3       	in	r18, 0x17	; 23
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <direction+0x28>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	6a 95       	dec	r22
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <direction+0x24>
     e3e:	80 95       	com	r24
     e40:	82 23       	and	r24, r18
     e42:	87 bb       	out	0x17, r24	; 23
     e44:	08 95       	ret
     e46:	27 b3       	in	r18, 0x17	; 23
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <direction+0x40>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	6a 95       	dec	r22
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <direction+0x3c>
     e56:	28 2b       	or	r18, r24
     e58:	27 bb       	out	0x17, r18	; 23
     e5a:	08 95       	ret
     e5c:	44 23       	and	r20, r20
     e5e:	19 f0       	breq	.+6      	; 0xe66 <direction+0x54>
     e60:	41 30       	cpi	r20, 0x01	; 1
     e62:	99 f5       	brne	.+102    	; 0xeca <direction+0xb8>
     e64:	0c c0       	rjmp	.+24     	; 0xe7e <direction+0x6c>
     e66:	24 b3       	in	r18, 0x14	; 20
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <direction+0x60>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	6a 95       	dec	r22
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <direction+0x5c>
     e76:	80 95       	com	r24
     e78:	82 23       	and	r24, r18
     e7a:	84 bb       	out	0x14, r24	; 20
     e7c:	08 95       	ret
     e7e:	24 b3       	in	r18, 0x14	; 20
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <direction+0x78>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	6a 95       	dec	r22
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <direction+0x74>
     e8e:	28 2b       	or	r18, r24
     e90:	24 bb       	out	0x14, r18	; 20
     e92:	08 95       	ret
     e94:	44 23       	and	r20, r20
     e96:	19 f0       	breq	.+6      	; 0xe9e <direction+0x8c>
     e98:	41 30       	cpi	r20, 0x01	; 1
     e9a:	b9 f4       	brne	.+46     	; 0xeca <direction+0xb8>
     e9c:	0c c0       	rjmp	.+24     	; 0xeb6 <direction+0xa4>
     e9e:	21 b3       	in	r18, 0x11	; 17
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <direction+0x98>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	6a 95       	dec	r22
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <direction+0x94>
     eae:	80 95       	com	r24
     eb0:	82 23       	and	r24, r18
     eb2:	81 bb       	out	0x11, r24	; 17
     eb4:	08 95       	ret
     eb6:	21 b3       	in	r18, 0x11	; 17
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <direction+0xb0>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	6a 95       	dec	r22
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <direction+0xac>
     ec6:	28 2b       	or	r18, r24
     ec8:	21 bb       	out	0x11, r18	; 17
     eca:	08 95       	ret

00000ecc <serial_select>:
     ecc:	88 23       	and	r24, r24
     ece:	21 f4       	brne	.+8      	; 0xed8 <serial_select+0xc>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	67 e0       	ldi	r22, 0x07	; 7
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <serial_select+0x14>
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	41 f4       	brne	.+16     	; 0xeec <serial_select+0x20>
     edc:	67 e0       	ldi	r22, 0x07	; 7
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	0e 94 29 06 	call	0xc52	; 0xc52 <write>
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	62 e0       	ldi	r22, 0x02	; 2
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <serial_select+0x34>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	59 f4       	brne	.+22     	; 0xf06 <serial_select+0x3a>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	67 e0       	ldi	r22, 0x07	; 7
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 29 06 	call	0xc52	; 0xc52 <write>
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 29 06 	call	0xc52	; 0xc52 <write>
     f04:	08 95       	ret
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	51 f4       	brne	.+20     	; 0xf1e <serial_select+0x52>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 29 06 	call	0xc52	; 0xc52 <write>
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	62 e0       	ldi	r22, 0x02	; 2
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 29 06 	call	0xc52	; 0xc52 <write>
     f1e:	08 95       	ret

00000f20 <jsonparser>:
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ea 01       	movw	r28, r20
     f2e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <strstr>
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	19 f4       	brne	.+6      	; 0xf3c <jsonparser+0x1c>
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	1d c0       	rjmp	.+58     	; 0xf76 <jsonparser+0x56>
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	60 ea       	ldi	r22, 0xA0	; 160
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	0e 94 69 13 	call	0x26d2	; 0x26d2 <strstr>
     f46:	7c 01       	movw	r14, r24
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	e8 0e       	add	r14, r24
     f4e:	f9 1e       	adc	r15, r25
     f50:	c7 01       	movw	r24, r14
     f52:	62 e2       	ldi	r22, 0x22	; 34
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
     f5a:	8c 01       	movw	r16, r24
     f5c:	0e 19       	sub	r16, r14
     f5e:	1f 09       	sbc	r17, r15
     f60:	ce 01       	movw	r24, r28
     f62:	b7 01       	movw	r22, r14
     f64:	a8 01       	movw	r20, r16
     f66:	0e 94 4f 13 	call	0x269e	; 0x269e <strncpy>
     f6a:	0c 0f       	add	r16, r28
     f6c:	1d 1f       	adc	r17, r29
     f6e:	f8 01       	movw	r30, r16
     f70:	10 82       	st	Z, r1
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	08 95       	ret

00000f86 <compare>:
     f86:	db 01       	movw	r26, r22
     f88:	0d 90       	ld	r0, X+
     f8a:	00 20       	and	r0, r0
     f8c:	e9 f7       	brne	.-6      	; 0xf88 <compare+0x2>
     f8e:	11 97       	sbiw	r26, 0x01	; 1
     f90:	a6 1b       	sub	r26, r22
     f92:	b7 0b       	sbc	r27, r23
     f94:	4a 2f       	mov	r20, r26
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	0e 94 37 13 	call	0x266e	; 0x266e <strncasecmp>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	89 2b       	or	r24, r25
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <compare+0x22>
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	c9 01       	movw	r24, r18
     faa:	08 95       	ret

00000fac <str_num>:
     fac:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
     fb0:	08 95       	ret

00000fb2 <gprs_restart>:
     fb2:	83 ed       	ldi	r24, 0xD3	; 211
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
     fba:	88 ec       	ldi	r24, 0xC8	; 200
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	60 ed       	ldi	r22, 0xD0	; 208
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	0e 94 0b 13 	call	0x2616	; 0x2616 <strstr_P>
     fce:	89 2b       	or	r24, r25
     fd0:	b9 f4       	brne	.+46     	; 0x1000 <gprs_restart+0x4e>
     fd2:	a3 9a       	sbi	0x14, 3	; 20
     fd4:	ab 9a       	sbi	0x15, 3	; 21
     fd6:	ab 98       	cbi	0x15, 3	; 21
     fd8:	84 e0       	ldi	r24, 0x04	; 4
     fda:	99 e2       	ldi	r25, 0x29	; 41
     fdc:	20 e9       	ldi	r18, 0x90	; 144
     fde:	31 e0       	ldi	r19, 0x01	; 1
     fe0:	f9 01       	movw	r30, r18
     fe2:	31 97       	sbiw	r30, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <gprs_restart+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	d9 f7       	brne	.-10     	; 0xfe0 <gprs_restart+0x2e>
     fea:	ab 9a       	sbi	0x15, 3	; 21
     fec:	80 e5       	ldi	r24, 0x50	; 80
     fee:	93 ec       	ldi	r25, 0xC3	; 195
     ff0:	20 e9       	ldi	r18, 0x90	; 144
     ff2:	31 e0       	ldi	r19, 0x01	; 1
     ff4:	f9 01       	movw	r30, r18
     ff6:	31 97       	sbiw	r30, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <gprs_restart+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <gprs_restart+0x42>
     ffe:	08 95       	ret
    1000:	a3 9a       	sbi	0x14, 3	; 20
    1002:	ab 9a       	sbi	0x15, 3	; 21
    1004:	ab 98       	cbi	0x15, 3	; 21
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	99 e2       	ldi	r25, 0x29	; 41
    100a:	20 e9       	ldi	r18, 0x90	; 144
    100c:	31 e0       	ldi	r19, 0x01	; 1
    100e:	f9 01       	movw	r30, r18
    1010:	31 97       	sbiw	r30, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <gprs_restart+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	d9 f7       	brne	.-10     	; 0x100e <gprs_restart+0x5c>
    1018:	ab 9a       	sbi	0x15, 3	; 21
    101a:	80 e3       	ldi	r24, 0x30	; 48
    101c:	95 e7       	ldi	r25, 0x75	; 117
    101e:	20 e9       	ldi	r18, 0x90	; 144
    1020:	31 e0       	ldi	r19, 0x01	; 1
    1022:	f9 01       	movw	r30, r18
    1024:	31 97       	sbiw	r30, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <gprs_restart+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	d9 f7       	brne	.-10     	; 0x1022 <gprs_restart+0x70>
    102c:	ab 9a       	sbi	0x15, 3	; 21
    102e:	ab 98       	cbi	0x15, 3	; 21
    1030:	84 e0       	ldi	r24, 0x04	; 4
    1032:	99 e2       	ldi	r25, 0x29	; 41
    1034:	20 e9       	ldi	r18, 0x90	; 144
    1036:	31 e0       	ldi	r19, 0x01	; 1
    1038:	f9 01       	movw	r30, r18
    103a:	31 97       	sbiw	r30, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <gprs_restart+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1040:	d9 f7       	brne	.-10     	; 0x1038 <gprs_restart+0x86>
    1042:	ab 9a       	sbi	0x15, 3	; 21
    1044:	08 95       	ret

00001046 <http_data>:
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	c0 e0       	ldi	r28, 0x00	; 0
    1058:	d0 e0       	ldi	r29, 0x00	; 0
    105a:	90 e9       	ldi	r25, 0x90	; 144
    105c:	c9 2e       	mov	r12, r25
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	d9 2e       	mov	r13, r25
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <http_data+0x2e>
    1064:	80 ed       	ldi	r24, 0xD0	; 208
    1066:	97 e0       	ldi	r25, 0x07	; 7
    1068:	f6 01       	movw	r30, r12
    106a:	31 97       	sbiw	r30, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <http_data+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1070:	d9 f7       	brne	.-10     	; 0x1068 <http_data+0x22>
    1072:	21 96       	adiw	r28, 0x01	; 1
    1074:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
    1078:	89 2b       	or	r24, r25
    107a:	19 f4       	brne	.+6      	; 0x1082 <http_data+0x3c>
    107c:	c2 33       	cpi	r28, 0x32	; 50
    107e:	d1 05       	cpc	r29, r1
    1080:	88 f3       	brcs	.-30     	; 0x1064 <http_data+0x1e>
    1082:	c4 36       	cpi	r28, 0x64	; 100
    1084:	d1 05       	cpc	r29, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <http_data+0x44>
    1088:	3e c0       	rjmp	.+124    	; 0x1106 <http_data+0xc0>
    108a:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    108e:	e1 2f       	mov	r30, r17
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	ec 5f       	subi	r30, 0xFC	; 252
    1094:	fd 4f       	sbci	r31, 0xFD	; 253
    1096:	80 83       	st	Z, r24
    1098:	8a 30       	cpi	r24, 0x0A	; 10
    109a:	99 f5       	brne	.+102    	; 0x1102 <http_data+0xbc>
    109c:	13 30       	cpi	r17, 0x03	; 3
    109e:	88 f1       	brcs	.+98     	; 0x1102 <http_data+0xbc>
    10a0:	ff 24       	eor	r15, r15
    10a2:	00 e0       	ldi	r16, 0x00	; 0
    10a4:	10 e0       	ldi	r17, 0x00	; 0
    10a6:	80 e9       	ldi	r24, 0x90	; 144
    10a8:	c8 2e       	mov	r12, r24
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	d8 2e       	mov	r13, r24
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <http_data+0x7c>
    10b0:	80 ed       	ldi	r24, 0xD0	; 208
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	f6 01       	movw	r30, r12
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <http_data+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10bc:	d9 f7       	brne	.-10     	; 0x10b4 <http_data+0x6e>
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
    10c6:	89 2b       	or	r24, r25
    10c8:	19 f4       	brne	.+6      	; 0x10d0 <http_data+0x8a>
    10ca:	0a 30       	cpi	r16, 0x0A	; 10
    10cc:	11 05       	cpc	r17, r1
    10ce:	80 f3       	brcs	.-32     	; 0x10b0 <http_data+0x6a>
    10d0:	04 36       	cpi	r16, 0x64	; 100
    10d2:	11 05       	cpc	r17, r1
    10d4:	c1 f0       	breq	.+48     	; 0x1106 <http_data+0xc0>
    10d6:	cf 2d       	mov	r28, r15
    10d8:	d0 e0       	ldi	r29, 0x00	; 0
    10da:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    10de:	cc 5f       	subi	r28, 0xFC	; 252
    10e0:	dd 4f       	sbci	r29, 0xFD	; 253
    10e2:	88 83       	st	Y, r24
    10e4:	8a 30       	cpi	r24, 0x0A	; 10
    10e6:	59 f4       	brne	.+22     	; 0x10fe <http_data+0xb8>
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	8f 15       	cp	r24, r15
    10ec:	40 f4       	brcc	.+16     	; 0x10fe <http_data+0xb8>
    10ee:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    10f2:	fe 01       	movw	r30, r28
    10f4:	31 97       	sbiw	r30, 0x01	; 1
    10f6:	10 82       	st	Z, r1
    10f8:	21 e0       	ldi	r18, 0x01	; 1
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	06 c0       	rjmp	.+12     	; 0x110a <http_data+0xc4>
    10fe:	f3 94       	inc	r15
    1100:	e0 cf       	rjmp	.-64     	; 0x10c2 <http_data+0x7c>
    1102:	1f 5f       	subi	r17, 0xFF	; 255
    1104:	b7 cf       	rjmp	.-146    	; 0x1074 <http_data+0x2e>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	c9 01       	movw	r24, r18
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	08 95       	ret

0000111c <WaitForGResponse>:
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	6c 01       	movw	r12, r24
    1130:	ff 24       	eor	r15, r15
    1132:	c0 e0       	ldi	r28, 0x00	; 0
    1134:	d0 e0       	ldi	r29, 0x00	; 0
    1136:	20 ea       	ldi	r18, 0xA0	; 160
    1138:	a2 2e       	mov	r10, r18
    113a:	2f e0       	ldi	r18, 0x0F	; 15
    113c:	b2 2e       	mov	r11, r18
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <WaitForGResponse+0x2c>
    1140:	21 96       	adiw	r28, 0x01	; 1
    1142:	c5 01       	movw	r24, r10
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <WaitForGResponse+0x28>
    1148:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
    114c:	89 2b       	or	r24, r25
    114e:	19 f4       	brne	.+6      	; 0x1156 <WaitForGResponse+0x3a>
    1150:	cc 15       	cp	r28, r12
    1152:	dd 05       	cpc	r29, r13
    1154:	a8 f3       	brcs	.-22     	; 0x1140 <WaitForGResponse+0x24>
    1156:	cc 15       	cp	r28, r12
    1158:	dd 05       	cpc	r29, r13
    115a:	c9 f0       	breq	.+50     	; 0x118e <WaitForGResponse+0x72>
    115c:	0f 2d       	mov	r16, r15
    115e:	10 e0       	ldi	r17, 0x00	; 0
    1160:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    1164:	f8 01       	movw	r30, r16
    1166:	ec 5f       	subi	r30, 0xFC	; 252
    1168:	fd 4f       	sbci	r31, 0xFD	; 253
    116a:	80 83       	st	Z, r24
    116c:	8a 30       	cpi	r24, 0x0A	; 10
    116e:	69 f4       	brne	.+26     	; 0x118a <WaitForGResponse+0x6e>
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	8f 15       	cp	r24, r15
    1174:	50 f4       	brcc	.+20     	; 0x118a <WaitForGResponse+0x6e>
    1176:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    117a:	98 01       	movw	r18, r16
    117c:	21 50       	subi	r18, 0x01	; 1
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	f9 01       	movw	r30, r18
    1182:	ec 5f       	subi	r30, 0xFC	; 252
    1184:	fd 4f       	sbci	r31, 0xFD	; 253
    1186:	10 82       	st	Z, r1
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <WaitForGResponse+0x76>
    118a:	f3 94       	inc	r15
    118c:	dd cf       	rjmp	.-70     	; 0x1148 <WaitForGResponse+0x2c>
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	c9 01       	movw	r24, r18
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	af 90       	pop	r10
    11a6:	08 95       	ret

000011a8 <gprs_disconnect>:
    11a8:	88 ed       	ldi	r24, 0xD8	; 216
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    11b8:	08 95       	ret

000011ba <gprs_init>:
    11ba:	88 ee       	ldi	r24, 0xE8	; 232
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	20 e9       	ldi	r18, 0x90	; 144
    11c0:	31 e0       	ldi	r19, 0x01	; 1
    11c2:	f9 01       	movw	r30, r18
    11c4:	31 97       	sbiw	r30, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <gprs_init+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ca:	d9 f7       	brne	.-10     	; 0x11c2 <gprs_init+0x8>
    11cc:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    11d0:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    11d4:	8c e5       	ldi	r24, 0x5C	; 92
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    11dc:	88 ec       	ldi	r24, 0xC8	; 200
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    11e4:	80 e3       	ldi	r24, 0x30	; 48
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    11ec:	84 ec       	ldi	r24, 0xC4	; 196
    11ee:	99 e0       	ldi	r25, 0x09	; 9
    11f0:	20 e9       	ldi	r18, 0x90	; 144
    11f2:	31 e0       	ldi	r19, 0x01	; 1
    11f4:	f9 01       	movw	r30, r18
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <gprs_init+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	d9 f7       	brne	.-10     	; 0x11f4 <gprs_init+0x3a>
    11fe:	88 ec       	ldi	r24, 0xC8	; 200
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	08 95       	ret

0000120c <status_check>:
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <status_check+0x14>
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	dd 24       	eor	r13, r13
    1228:	ee 24       	eor	r14, r14
    122a:	ff 24       	eor	r15, r15
    122c:	30 e9       	ldi	r19, 0x90	; 144
    122e:	a3 2e       	mov	r10, r19
    1230:	31 e0       	ldi	r19, 0x01	; 1
    1232:	b3 2e       	mov	r11, r19
    1234:	0a c0       	rjmp	.+20     	; 0x124a <status_check+0x3e>
    1236:	80 ed       	ldi	r24, 0xD0	; 208
    1238:	97 e0       	ldi	r25, 0x07	; 7
    123a:	f5 01       	movw	r30, r10
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <status_check+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	d9 f7       	brne	.-10     	; 0x123a <status_check+0x2e>
    1244:	08 94       	sec
    1246:	e1 1c       	adc	r14, r1
    1248:	f1 1c       	adc	r15, r1
    124a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
    124e:	89 2b       	or	r24, r25
    1250:	21 f4       	brne	.+8      	; 0x125a <status_check+0x4e>
    1252:	82 e3       	ldi	r24, 0x32	; 50
    1254:	e8 16       	cp	r14, r24
    1256:	f1 04       	cpc	r15, r1
    1258:	70 f3       	brcs	.-36     	; 0x1236 <status_check+0x2a>
    125a:	e4 e6       	ldi	r30, 0x64	; 100
    125c:	ee 16       	cp	r14, r30
    125e:	f1 04       	cpc	r15, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <status_check+0x58>
    1262:	46 c0       	rjmp	.+140    	; 0x12f0 <status_check+0xe4>
    1264:	0d 2d       	mov	r16, r13
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    126c:	0c 5f       	subi	r16, 0xFC	; 252
    126e:	1d 4f       	sbci	r17, 0xFD	; 253
    1270:	f8 01       	movw	r30, r16
    1272:	80 83       	st	Z, r24
    1274:	8a 30       	cpi	r24, 0x0A	; 10
    1276:	d1 f5       	brne	.+116    	; 0x12ec <status_check+0xe0>
    1278:	f2 e0       	ldi	r31, 0x02	; 2
    127a:	fd 15       	cp	r31, r13
    127c:	b8 f5       	brcc	.+110    	; 0x12ec <status_check+0xe0>
    127e:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1282:	f8 01       	movw	r30, r16
    1284:	31 97       	sbiw	r30, 0x01	; 1
    1286:	10 82       	st	Z, r1
    1288:	84 e0       	ldi	r24, 0x04	; 4
    128a:	92 e0       	ldi	r25, 0x02	; 2
    128c:	6c e2       	ldi	r22, 0x2C	; 44
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1294:	7c 01       	movw	r14, r24
    1296:	08 94       	sec
    1298:	e1 1c       	adc	r14, r1
    129a:	f1 1c       	adc	r15, r1
    129c:	c7 01       	movw	r24, r14
    129e:	6c e2       	ldi	r22, 0x2C	; 44
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    12a6:	fc 01       	movw	r30, r24
    12a8:	11 92       	st	Z+, r1
    12aa:	8f 01       	movw	r16, r30
    12ac:	cf 01       	movw	r24, r30
    12ae:	6d e0       	ldi	r22, 0x0D	; 13
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    12b6:	fc 01       	movw	r30, r24
    12b8:	10 82       	st	Z, r1
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	b8 01       	movw	r22, r16
    12c0:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    12c4:	8e 01       	movw	r16, r28
    12c6:	0f 5f       	subi	r16, 0xFF	; 255
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ca:	c8 01       	movw	r24, r16
    12cc:	b7 01       	movw	r22, r14
    12ce:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
    12da:	90 93 ff 01 	sts	0x01FF, r25
    12de:	80 93 fe 01 	sts	0x01FE, r24
    12e2:	c8 01       	movw	r24, r16
    12e4:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
    12e8:	9c 01       	movw	r18, r24
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <status_check+0xe8>
    12ec:	d3 94       	inc	r13
    12ee:	ad cf       	rjmp	.-166    	; 0x124a <status_check+0x3e>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	c9 01       	movw	r24, r18
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	bf 90       	pop	r11
    130c:	af 90       	pop	r10
    130e:	08 95       	ret

00001310 <gprs_connect>:
    1310:	81 e2       	ldi	r24, 0x21	; 33
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1318:	84 ec       	ldi	r24, 0xC4	; 196
    131a:	99 e0       	ldi	r25, 0x09	; 9
    131c:	20 e9       	ldi	r18, 0x90	; 144
    131e:	31 e0       	ldi	r19, 0x01	; 1
    1320:	f9 01       	movw	r30, r18
    1322:	31 97       	sbiw	r30, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <gprs_connect+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	d9 f7       	brne	.-10     	; 0x1320 <gprs_connect+0x10>
    132a:	80 ed       	ldi	r24, 0xD0	; 208
    132c:	97 e0       	ldi	r25, 0x07	; 7
    132e:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    1332:	84 e0       	ldi	r24, 0x04	; 4
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	6c e2       	ldi	r22, 0x2C	; 44
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <strrchr>
    133e:	fc 01       	movw	r30, r24
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	80 33       	cpi	r24, 0x30	; 48
    1344:	19 f0       	breq	.+6      	; 0x134c <gprs_connect+0x3c>
    1346:	83 e1       	ldi	r24, 0x13	; 19
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	31 c0       	rjmp	.+98     	; 0x13ae <gprs_connect+0x9e>
    134c:	84 e0       	ldi	r24, 0x04	; 4
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1354:	88 ec       	ldi	r24, 0xC8	; 200
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    135c:	84 e2       	ldi	r24, 0x24	; 36
    135e:	97 e7       	ldi	r25, 0x77	; 119
    1360:	20 e9       	ldi	r18, 0x90	; 144
    1362:	31 e0       	ldi	r19, 0x01	; 1
    1364:	f9 01       	movw	r30, r18
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <gprs_connect+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136c:	d9 f7       	brne	.-10     	; 0x1364 <gprs_connect+0x54>
    136e:	85 ef       	ldi	r24, 0xF5	; 245
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1376:	84 ec       	ldi	r24, 0xC4	; 196
    1378:	99 e0       	ldi	r25, 0x09	; 9
    137a:	20 e9       	ldi	r18, 0x90	; 144
    137c:	31 e0       	ldi	r19, 0x01	; 1
    137e:	f9 01       	movw	r30, r18
    1380:	31 97       	sbiw	r30, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <gprs_connect+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	d9 f7       	brne	.-10     	; 0x137e <gprs_connect+0x6e>
    1388:	80 ed       	ldi	r24, 0xD0	; 208
    138a:	97 e0       	ldi	r25, 0x07	; 7
    138c:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    1390:	84 e0       	ldi	r24, 0x04	; 4
    1392:	92 e0       	ldi	r25, 0x02	; 2
    1394:	6c e2       	ldi	r22, 0x2C	; 44
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	0e 94 5e 13 	call	0x26bc	; 0x26bc <strrchr>
    139c:	fc 01       	movw	r30, r24
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	80 33       	cpi	r24, 0x30	; 48
    13a2:	19 f4       	brne	.+6      	; 0x13aa <gprs_connect+0x9a>
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	0a c0       	rjmp	.+20     	; 0x13be <gprs_connect+0xae>
    13aa:	87 ee       	ldi	r24, 0xE7	; 231
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    13b2:	88 ec       	ldi	r24, 0xC8	; 200
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    13ba:	21 e0       	ldi	r18, 0x01	; 1
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	c9 01       	movw	r24, r18
    13c0:	08 95       	ret

000013c2 <http_get_P>:
    13c2:	cf 92       	push	r12
    13c4:	df 92       	push	r13
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	8c 01       	movw	r16, r24
    13d4:	6b 01       	movw	r12, r22
    13d6:	40 e9       	ldi	r20, 0x90	; 144
    13d8:	e4 2e       	mov	r14, r20
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	f4 2e       	mov	r15, r20
    13de:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    13e2:	84 e8       	ldi	r24, 0x84	; 132
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    13ea:	c8 01       	movw	r24, r16
    13ec:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    13f0:	80 e8       	ldi	r24, 0x80	; 128
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    13f8:	88 ec       	ldi	r24, 0xC8	; 200
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    1400:	8e e6       	ldi	r24, 0x6E	; 110
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1408:	88 ec       	ldi	r24, 0xC8	; 200
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    1410:	0e 94 06 09 	call	0x120c	; 0x120c <status_check>
    1414:	ec 01       	movw	r28, r24
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	c9 35       	cpi	r28, 0x59	; 89
    141a:	d8 07       	cpc	r29, r24
    141c:	28 f1       	brcs	.+74     	; 0x1468 <http_get_P+0xa6>
    141e:	80 91 ce 00 	lds	r24, 0x00CE
    1422:	90 91 cf 00 	lds	r25, 0x00CF
    1426:	8a 31       	cpi	r24, 0x1A	; 26
    1428:	91 05       	cpc	r25, r1
    142a:	f4 f0       	brlt	.+60     	; 0x1468 <http_get_P+0xa6>
    142c:	4c 97       	sbiw	r24, 0x1c	; 28
    142e:	e4 f4       	brge	.+56     	; 0x1468 <http_get_P+0xa6>
    1430:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gprs_disconnect>
    1434:	88 ea       	ldi	r24, 0xA8	; 168
    1436:	91 e6       	ldi	r25, 0x61	; 97
    1438:	f7 01       	movw	r30, r14
    143a:	31 97       	sbiw	r30, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <http_get_P+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1440:	d9 f7       	brne	.-10     	; 0x1438 <http_get_P+0x76>
    1442:	0e 94 88 09 	call	0x1310	; 0x1310 <gprs_connect>
    1446:	88 eb       	ldi	r24, 0xB8	; 184
    1448:	98 e8       	ldi	r25, 0x88	; 136
    144a:	f7 01       	movw	r30, r14
    144c:	31 97       	sbiw	r30, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <http_get_P+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	d9 f7       	brne	.-10     	; 0x144a <http_get_P+0x88>
    1454:	80 91 ce 00 	lds	r24, 0x00CE
    1458:	90 91 cf 00 	lds	r25, 0x00CF
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	90 93 cf 00 	sts	0x00CF, r25
    1462:	80 93 ce 00 	sts	0x00CE, r24
    1466:	bb cf       	rjmp	.-138    	; 0x13de <http_get_P+0x1c>
    1468:	80 91 ce 00 	lds	r24, 0x00CE
    146c:	90 91 cf 00 	lds	r25, 0x00CF
    1470:	4c 97       	sbiw	r24, 0x1c	; 28
    1472:	64 f1       	brlt	.+88     	; 0x14cc <http_get_P+0x10a>
    1474:	10 92 cf 00 	sts	0x00CF, r1
    1478:	10 92 ce 00 	sts	0x00CE, r1
    147c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gprs_restart>
    1480:	80 e5       	ldi	r24, 0x50	; 80
    1482:	93 ec       	ldi	r25, 0xC3	; 195
    1484:	20 e9       	ldi	r18, 0x90	; 144
    1486:	31 e0       	ldi	r19, 0x01	; 1
    1488:	f9 01       	movw	r30, r18
    148a:	31 97       	sbiw	r30, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <http_get_P+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	d9 f7       	brne	.-10     	; 0x1488 <http_get_P+0xc6>
    1492:	80 e4       	ldi	r24, 0x40	; 64
    1494:	9c e9       	ldi	r25, 0x9C	; 156
    1496:	20 e9       	ldi	r18, 0x90	; 144
    1498:	31 e0       	ldi	r19, 0x01	; 1
    149a:	f9 01       	movw	r30, r18
    149c:	31 97       	sbiw	r30, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <http_get_P+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	d9 f7       	brne	.-10     	; 0x149a <http_get_P+0xd8>
    14a4:	80 e4       	ldi	r24, 0x40	; 64
    14a6:	9c e9       	ldi	r25, 0x9C	; 156
    14a8:	20 e9       	ldi	r18, 0x90	; 144
    14aa:	31 e0       	ldi	r19, 0x01	; 1
    14ac:	f9 01       	movw	r30, r18
    14ae:	31 97       	sbiw	r30, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <http_get_P+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b4:	d9 f7       	brne	.-10     	; 0x14ac <http_get_P+0xea>
    14b6:	80 e4       	ldi	r24, 0x40	; 64
    14b8:	9c e9       	ldi	r25, 0x9C	; 156
    14ba:	20 e9       	ldi	r18, 0x90	; 144
    14bc:	31 e0       	ldi	r19, 0x01	; 1
    14be:	f9 01       	movw	r30, r18
    14c0:	31 97       	sbiw	r30, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <http_get_P+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	d9 f7       	brne	.-10     	; 0x14be <http_get_P+0xfc>
    14c8:	0e 94 88 09 	call	0x1310	; 0x1310 <gprs_connect>
    14cc:	80 91 ce 00 	lds	r24, 0x00CE
    14d0:	90 91 cf 00 	lds	r25, 0x00CF
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	90 93 cf 00 	sts	0x00CF, r25
    14da:	80 93 ce 00 	sts	0x00CE, r24
    14de:	80 91 fe 01 	lds	r24, 0x01FE
    14e2:	90 91 ff 01 	lds	r25, 0x01FF
    14e6:	89 3c       	cpi	r24, 0xC9	; 201
    14e8:	91 05       	cpc	r25, r1
    14ea:	1c f0       	brlt	.+6      	; 0x14f2 <http_get_P+0x130>
    14ec:	c9 e0       	ldi	r28, 0x09	; 9
    14ee:	d3 e0       	ldi	r29, 0x03	; 3
    14f0:	16 c0       	rjmp	.+44     	; 0x151e <http_get_P+0x15c>
    14f2:	c8 3c       	cpi	r28, 0xC8	; 200
    14f4:	d1 05       	cpc	r29, r1
    14f6:	99 f4       	brne	.+38     	; 0x151e <http_get_P+0x15c>
    14f8:	10 92 cf 00 	sts	0x00CF, r1
    14fc:	10 92 ce 00 	sts	0x00CE, r1
    1500:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1504:	80 e6       	ldi	r24, 0x60	; 96
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    150c:	0e 94 23 08 	call	0x1046	; 0x1046 <http_data>
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	29 f4       	brne	.+10     	; 0x151e <http_get_P+0x15c>
    1514:	c6 01       	movw	r24, r12
    1516:	64 e0       	ldi	r22, 0x04	; 4
    1518:	72 e0       	ldi	r23, 0x02	; 2
    151a:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    151e:	ce 01       	movw	r24, r28
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	08 95       	ret

00001532 <http_get>:
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	7c 01       	movw	r14, r24
    1544:	6b 01       	movw	r12, r22
    1546:	00 e9       	ldi	r16, 0x90	; 144
    1548:	11 e0       	ldi	r17, 0x01	; 1
    154a:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    154e:	8c eb       	ldi	r24, 0xBC	; 188
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1556:	c7 01       	movw	r24, r14
    1558:	0e 94 b5 02 	call	0x56a	; 0x56a <serial_string>
    155c:	88 eb       	ldi	r24, 0xB8	; 184
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1564:	88 ec       	ldi	r24, 0xC8	; 200
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    156c:	8c e2       	ldi	r24, 0x2C	; 44
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	f8 01       	movw	r30, r16
    1572:	31 97       	sbiw	r30, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <http_get+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	d9 f7       	brne	.-10     	; 0x1570 <http_get+0x3e>
    157a:	86 ea       	ldi	r24, 0xA6	; 166
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1582:	80 e7       	ldi	r24, 0x70	; 112
    1584:	97 e1       	ldi	r25, 0x17	; 23
    1586:	0e 94 8e 08 	call	0x111c	; 0x111c <WaitForGResponse>
    158a:	0e 94 06 09 	call	0x120c	; 0x120c <status_check>
    158e:	ec 01       	movw	r28, r24
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	c9 35       	cpi	r28, 0x59	; 89
    1594:	d8 07       	cpc	r29, r24
    1596:	28 f1       	brcs	.+74     	; 0x15e2 <http_get+0xb0>
    1598:	80 91 ce 00 	lds	r24, 0x00CE
    159c:	90 91 cf 00 	lds	r25, 0x00CF
    15a0:	8a 31       	cpi	r24, 0x1A	; 26
    15a2:	91 05       	cpc	r25, r1
    15a4:	f4 f0       	brlt	.+60     	; 0x15e2 <http_get+0xb0>
    15a6:	4c 97       	sbiw	r24, 0x1c	; 28
    15a8:	e4 f4       	brge	.+56     	; 0x15e2 <http_get+0xb0>
    15aa:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gprs_disconnect>
    15ae:	88 ea       	ldi	r24, 0xA8	; 168
    15b0:	91 e6       	ldi	r25, 0x61	; 97
    15b2:	f8 01       	movw	r30, r16
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <http_get+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	d9 f7       	brne	.-10     	; 0x15b2 <http_get+0x80>
    15bc:	0e 94 88 09 	call	0x1310	; 0x1310 <gprs_connect>
    15c0:	88 eb       	ldi	r24, 0xB8	; 184
    15c2:	98 e8       	ldi	r25, 0x88	; 136
    15c4:	f8 01       	movw	r30, r16
    15c6:	31 97       	sbiw	r30, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <http_get+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15cc:	d9 f7       	brne	.-10     	; 0x15c4 <http_get+0x92>
    15ce:	80 91 ce 00 	lds	r24, 0x00CE
    15d2:	90 91 cf 00 	lds	r25, 0x00CF
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	90 93 cf 00 	sts	0x00CF, r25
    15dc:	80 93 ce 00 	sts	0x00CE, r24
    15e0:	b4 cf       	rjmp	.-152    	; 0x154a <http_get+0x18>
    15e2:	80 91 ce 00 	lds	r24, 0x00CE
    15e6:	90 91 cf 00 	lds	r25, 0x00CF
    15ea:	4c 97       	sbiw	r24, 0x1c	; 28
    15ec:	64 f1       	brlt	.+88     	; 0x1646 <http_get+0x114>
    15ee:	10 92 cf 00 	sts	0x00CF, r1
    15f2:	10 92 ce 00 	sts	0x00CE, r1
    15f6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gprs_restart>
    15fa:	80 e5       	ldi	r24, 0x50	; 80
    15fc:	93 ec       	ldi	r25, 0xC3	; 195
    15fe:	20 e9       	ldi	r18, 0x90	; 144
    1600:	31 e0       	ldi	r19, 0x01	; 1
    1602:	f9 01       	movw	r30, r18
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <http_get+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1608:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160a:	d9 f7       	brne	.-10     	; 0x1602 <http_get+0xd0>
    160c:	80 e4       	ldi	r24, 0x40	; 64
    160e:	9c e9       	ldi	r25, 0x9C	; 156
    1610:	20 e9       	ldi	r18, 0x90	; 144
    1612:	31 e0       	ldi	r19, 0x01	; 1
    1614:	f9 01       	movw	r30, r18
    1616:	31 97       	sbiw	r30, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <http_get+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	d9 f7       	brne	.-10     	; 0x1614 <http_get+0xe2>
    161e:	80 e4       	ldi	r24, 0x40	; 64
    1620:	9c e9       	ldi	r25, 0x9C	; 156
    1622:	20 e9       	ldi	r18, 0x90	; 144
    1624:	31 e0       	ldi	r19, 0x01	; 1
    1626:	f9 01       	movw	r30, r18
    1628:	31 97       	sbiw	r30, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <http_get+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	d9 f7       	brne	.-10     	; 0x1626 <http_get+0xf4>
    1630:	80 e4       	ldi	r24, 0x40	; 64
    1632:	9c e9       	ldi	r25, 0x9C	; 156
    1634:	20 e9       	ldi	r18, 0x90	; 144
    1636:	31 e0       	ldi	r19, 0x01	; 1
    1638:	f9 01       	movw	r30, r18
    163a:	31 97       	sbiw	r30, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <http_get+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	d9 f7       	brne	.-10     	; 0x1638 <http_get+0x106>
    1642:	0e 94 88 09 	call	0x1310	; 0x1310 <gprs_connect>
    1646:	80 91 ce 00 	lds	r24, 0x00CE
    164a:	90 91 cf 00 	lds	r25, 0x00CF
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	90 93 cf 00 	sts	0x00CF, r25
    1654:	80 93 ce 00 	sts	0x00CE, r24
    1658:	80 91 fe 01 	lds	r24, 0x01FE
    165c:	90 91 ff 01 	lds	r25, 0x01FF
    1660:	89 3c       	cpi	r24, 0xC9	; 201
    1662:	91 05       	cpc	r25, r1
    1664:	1c f0       	brlt	.+6      	; 0x166c <http_get+0x13a>
    1666:	c9 e0       	ldi	r28, 0x09	; 9
    1668:	d3 e0       	ldi	r29, 0x03	; 3
    166a:	1f c0       	rjmp	.+62     	; 0x16aa <http_get+0x178>
    166c:	c8 3c       	cpi	r28, 0xC8	; 200
    166e:	d1 05       	cpc	r29, r1
    1670:	e1 f4       	brne	.+56     	; 0x16aa <http_get+0x178>
    1672:	8c e2       	ldi	r24, 0x2C	; 44
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	20 e9       	ldi	r18, 0x90	; 144
    1678:	31 e0       	ldi	r19, 0x01	; 1
    167a:	f9 01       	movw	r30, r18
    167c:	31 97       	sbiw	r30, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <http_get+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	d9 f7       	brne	.-10     	; 0x167a <http_get+0x148>
    1684:	10 92 cf 00 	sts	0x00CF, r1
    1688:	10 92 ce 00 	sts	0x00CE, r1
    168c:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1690:	88 e9       	ldi	r24, 0x98	; 152
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1698:	0e 94 23 08 	call	0x1046	; 0x1046 <http_data>
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	29 f4       	brne	.+10     	; 0x16aa <http_get+0x178>
    16a0:	c6 01       	movw	r24, r12
    16a2:	64 e0       	ldi	r22, 0x04	; 4
    16a4:	72 e0       	ldi	r23, 0x02	; 2
    16a6:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    16aa:	ce 01       	movw	r24, r28
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	08 95       	ret

000016be <gps_fix>:
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	c6 56       	subi	r28, 0x66	; 102
    16cc:	d0 40       	sbci	r29, 0x00	; 0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    16dc:	8c e7       	ldi	r24, 0x7C	; 124
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    16e4:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    16e8:	ca 97       	sbiw	r24, 0x3a	; 58
    16ea:	e1 f7       	brne	.-8      	; 0x16e4 <gps_fix+0x26>
    16ec:	84 ec       	ldi	r24, 0xC4	; 196
    16ee:	99 e0       	ldi	r25, 0x09	; 9
    16f0:	20 e9       	ldi	r18, 0x90	; 144
    16f2:	31 e0       	ldi	r19, 0x01	; 1
    16f4:	f9 01       	movw	r30, r18
    16f6:	31 97       	sbiw	r30, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <gps_fix+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	d9 f7       	brne	.-10     	; 0x16f4 <gps_fix+0x36>
    16fe:	8e 01       	movw	r16, r28
    1700:	0d 5f       	subi	r16, 0xFD	; 253
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	c8 01       	movw	r24, r16
    1706:	6f e5       	ldi	r22, 0x5F	; 95
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	0e 94 c9 02 	call	0x592	; 0x592 <s_readbuffer>
    170e:	c8 01       	movw	r24, r16
    1710:	6c e2       	ldi	r22, 0x2C	; 44
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1718:	bc 01       	movw	r22, r24
    171a:	6f 5f       	subi	r22, 0xFF	; 255
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8e 01       	movw	r16, r28
    1720:	0f 5f       	subi	r16, 0xFF	; 255
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	c8 01       	movw	r24, r16
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	0e 94 4f 13 	call	0x269e	; 0x269e <strncpy>
    172e:	1a 82       	std	Y+2, r1	; 0x02
    1730:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1734:	c8 01       	movw	r24, r16
    1736:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
    173a:	ca 59       	subi	r28, 0x9A	; 154
    173c:	df 4f       	sbci	r29, 0xFF	; 255
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <gps_getcoordinates>:
    1752:	2f 92       	push	r2
    1754:	3f 92       	push	r3
    1756:	4f 92       	push	r4
    1758:	5f 92       	push	r5
    175a:	6f 92       	push	r6
    175c:	7f 92       	push	r7
    175e:	8f 92       	push	r8
    1760:	9f 92       	push	r9
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	c8 56       	subi	r28, 0x68	; 104
    177c:	d0 40       	sbci	r29, 0x00	; 0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	2c 01       	movw	r4, r24
    178a:	1b 01       	movw	r2, r22
    178c:	a9 96       	adiw	r28, 0x29	; 41
    178e:	5f af       	std	Y+63, r21	; 0x3f
    1790:	4e af       	std	Y+62, r20	; 0x3e
    1792:	a9 97       	sbiw	r28, 0x29	; 41
    1794:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1798:	89 e8       	ldi	r24, 0x89	; 137
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    17a0:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    17a4:	ca 97       	sbiw	r24, 0x3a	; 58
    17a6:	e1 f7       	brne	.-8      	; 0x17a0 <gps_getcoordinates+0x4e>
    17a8:	84 ec       	ldi	r24, 0xC4	; 196
    17aa:	99 e0       	ldi	r25, 0x09	; 9
    17ac:	20 e9       	ldi	r18, 0x90	; 144
    17ae:	31 e0       	ldi	r19, 0x01	; 1
    17b0:	f9 01       	movw	r30, r18
    17b2:	31 97       	sbiw	r30, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <gps_getcoordinates+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	d9 f7       	brne	.-10     	; 0x17b0 <gps_getcoordinates+0x5e>
    17ba:	8e 01       	movw	r16, r28
    17bc:	0d 5f       	subi	r16, 0xFD	; 253
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	c8 01       	movw	r24, r16
    17c2:	6f e5       	ldi	r22, 0x5F	; 95
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	0e 94 c9 02 	call	0x592	; 0x592 <s_readbuffer>
    17ca:	c8 01       	movw	r24, r16
    17cc:	6c e2       	ldi	r22, 0x2C	; 44
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    17d4:	4c 01       	movw	r8, r24
    17d6:	08 94       	sec
    17d8:	81 1c       	adc	r8, r1
    17da:	91 1c       	adc	r9, r1
    17dc:	c4 01       	movw	r24, r8
    17de:	6c e2       	ldi	r22, 0x2C	; 44
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	6c e2       	ldi	r22, 0x2C	; 44
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    17f0:	6c 01       	movw	r12, r24
    17f2:	08 94       	sec
    17f4:	c1 1c       	adc	r12, r1
    17f6:	d1 1c       	adc	r13, r1
    17f8:	c6 01       	movw	r24, r12
    17fa:	6c e2       	ldi	r22, 0x2C	; 44
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1802:	5c 01       	movw	r10, r24
    1804:	3c 01       	movw	r6, r24
    1806:	08 94       	sec
    1808:	61 1c       	adc	r6, r1
    180a:	71 1c       	adc	r7, r1
    180c:	c3 01       	movw	r24, r6
    180e:	6c e2       	ldi	r22, 0x2C	; 44
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1816:	7c 01       	movw	r14, r24
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	6c e2       	ldi	r22, 0x2C	; 44
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1822:	8c 01       	movw	r16, r24
    1824:	0f 5f       	subi	r16, 0xFF	; 255
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	c8 01       	movw	r24, r16
    182a:	6c e2       	ldi	r22, 0x2C	; 44
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1832:	fc 01       	movw	r30, r24
    1834:	10 82       	st	Z, r1
    1836:	f7 01       	movw	r30, r14
    1838:	10 82       	st	Z, r1
    183a:	f5 01       	movw	r30, r10
    183c:	10 82       	st	Z, r1
    183e:	c2 01       	movw	r24, r4
    1840:	b6 01       	movw	r22, r12
    1842:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    1846:	c1 01       	movw	r24, r2
    1848:	b3 01       	movw	r22, r6
    184a:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    184e:	a9 96       	adiw	r28, 0x29	; 41
    1850:	8e ad       	ldd	r24, Y+62	; 0x3e
    1852:	9f ad       	ldd	r25, Y+63	; 0x3f
    1854:	a9 97       	sbiw	r28, 0x29	; 41
    1856:	b8 01       	movw	r22, r16
    1858:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    185c:	8e 01       	movw	r16, r28
    185e:	0f 5f       	subi	r16, 0xFF	; 255
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	c8 01       	movw	r24, r16
    1864:	b4 01       	movw	r22, r8
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	0e 94 4f 13 	call	0x269e	; 0x269e <strncpy>
    186e:	1a 82       	std	Y+2, r1	; 0x02
    1870:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1874:	c8 01       	movw	r24, r16
    1876:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
    187a:	c8 59       	subi	r28, 0x98	; 152
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	9f 90       	pop	r9
    189e:	8f 90       	pop	r8
    18a0:	7f 90       	pop	r7
    18a2:	6f 90       	pop	r6
    18a4:	5f 90       	pop	r5
    18a6:	4f 90       	pop	r4
    18a8:	3f 90       	pop	r3
    18aa:	2f 90       	pop	r2
    18ac:	08 95       	ret

000018ae <WaitForGPResponse>:
    18ae:	af 92       	push	r10
    18b0:	bf 92       	push	r11
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	6c 01       	movw	r12, r24
    18c2:	ff 24       	eor	r15, r15
    18c4:	c0 e0       	ldi	r28, 0x00	; 0
    18c6:	d0 e0       	ldi	r29, 0x00	; 0
    18c8:	80 ea       	ldi	r24, 0xA0	; 160
    18ca:	a8 2e       	mov	r10, r24
    18cc:	8f e0       	ldi	r24, 0x0F	; 15
    18ce:	b8 2e       	mov	r11, r24
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <WaitForGPResponse+0x2c>
    18d2:	21 96       	adiw	r28, 0x01	; 1
    18d4:	c5 01       	movw	r24, r10
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <WaitForGPResponse+0x28>
    18da:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
    18de:	89 2b       	or	r24, r25
    18e0:	19 f4       	brne	.+6      	; 0x18e8 <WaitForGPResponse+0x3a>
    18e2:	cc 15       	cp	r28, r12
    18e4:	dd 05       	cpc	r29, r13
    18e6:	a8 f3       	brcs	.-22     	; 0x18d2 <WaitForGPResponse+0x24>
    18e8:	cc 15       	cp	r28, r12
    18ea:	dd 05       	cpc	r29, r13
    18ec:	c9 f0       	breq	.+50     	; 0x1920 <WaitForGPResponse+0x72>
    18ee:	0f 2d       	mov	r16, r15
    18f0:	10 e0       	ldi	r17, 0x00	; 0
    18f2:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    18f6:	f8 01       	movw	r30, r16
    18f8:	ec 55       	subi	r30, 0x5C	; 92
    18fa:	fd 4f       	sbci	r31, 0xFD	; 253
    18fc:	80 83       	st	Z, r24
    18fe:	8a 30       	cpi	r24, 0x0A	; 10
    1900:	69 f4       	brne	.+26     	; 0x191c <WaitForGPResponse+0x6e>
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	8f 15       	cp	r24, r15
    1906:	50 f4       	brcc	.+20     	; 0x191c <WaitForGPResponse+0x6e>
    1908:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    190c:	98 01       	movw	r18, r16
    190e:	21 50       	subi	r18, 0x01	; 1
    1910:	30 40       	sbci	r19, 0x00	; 0
    1912:	f9 01       	movw	r30, r18
    1914:	ec 55       	subi	r30, 0x5C	; 92
    1916:	fd 4f       	sbci	r31, 0xFD	; 253
    1918:	10 82       	st	Z, r1
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <WaitForGPResponse+0x76>
    191c:	f3 94       	inc	r15
    191e:	dd cf       	rjmp	.-70     	; 0x18da <WaitForGPResponse+0x2c>
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	c9 01       	movw	r24, r18
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	bf 90       	pop	r11
    1936:	af 90       	pop	r10
    1938:	08 95       	ret

0000193a <agps_update>:
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1946:	86 e9       	ldi	r24, 0x96	; 150
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1956:	8a e6       	ldi	r24, 0x6A	; 106
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    195e:	84 ec       	ldi	r24, 0xC4	; 196
    1960:	99 e0       	ldi	r25, 0x09	; 9
    1962:	20 e9       	ldi	r18, 0x90	; 144
    1964:	31 e0       	ldi	r19, 0x01	; 1
    1966:	f9 01       	movw	r30, r18
    1968:	31 97       	sbiw	r30, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <agps_update+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	d9 f7       	brne	.-10     	; 0x1966 <agps_update+0x2c>
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1978:	8b e5       	ldi	r24, 0x5B	; 91
    197a:	92 e0       	ldi	r25, 0x02	; 2
    197c:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1988:	80 e3       	ldi	r24, 0x30	; 48
    198a:	95 e7       	ldi	r25, 0x75	; 117
    198c:	20 e9       	ldi	r18, 0x90	; 144
    198e:	31 e0       	ldi	r19, 0x01	; 1
    1990:	f9 01       	movw	r30, r18
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <agps_update+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1996:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	d9 f7       	brne	.-10     	; 0x1990 <agps_update+0x56>
    199a:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    199e:	8c e4       	ldi	r24, 0x4C	; 76
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    19a6:	84 ec       	ldi	r24, 0xC4	; 196
    19a8:	99 e0       	ldi	r25, 0x09	; 9
    19aa:	20 e9       	ldi	r18, 0x90	; 144
    19ac:	31 e0       	ldi	r19, 0x01	; 1
    19ae:	f9 01       	movw	r30, r18
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <agps_update+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	d9 f7       	brne	.-10     	; 0x19ae <agps_update+0x74>
    19b8:	80 ed       	ldi	r24, 0xD0	; 208
    19ba:	97 e0       	ldi	r25, 0x07	; 7
    19bc:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    19c0:	84 ea       	ldi	r24, 0xA4	; 164
    19c2:	92 e0       	ldi	r25, 0x02	; 2
    19c4:	6c e2       	ldi	r22, 0x2C	; 44
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <strrchr>
    19cc:	fc 01       	movw	r30, r24
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	80 33       	cpi	r24, 0x30	; 48
    19d2:	19 f4       	brne	.+6      	; 0x19da <agps_update+0xa0>
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	67 c0       	rjmp	.+206    	; 0x1aa8 <agps_update+0x16e>
    19da:	8d e2       	ldi	r24, 0x2D	; 45
    19dc:	92 e0       	ldi	r25, 0x02	; 2
    19de:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    19e2:	88 ec       	ldi	r24, 0xC8	; 200
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    19ea:	87 e1       	ldi	r24, 0x17	; 23
    19ec:	92 e0       	ldi	r25, 0x02	; 2
    19ee:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    19f2:	88 ec       	ldi	r24, 0xC8	; 200
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	92 e0       	ldi	r25, 0x02	; 2
    19fe:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1a0a:	88 ee       	ldi	r24, 0xE8	; 232
    1a0c:	91 e0       	ldi	r25, 0x01	; 1
    1a0e:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1a1a:	84 ed       	ldi	r24, 0xD4	; 212
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1a22:	88 ec       	ldi	r24, 0xC8	; 200
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1a2a:	83 ec       	ldi	r24, 0xC3	; 195
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1a32:	c0 e0       	ldi	r28, 0x00	; 0
    1a34:	d0 e0       	ldi	r29, 0x00	; 0
    1a36:	00 e9       	ldi	r16, 0x90	; 144
    1a38:	11 e0       	ldi	r17, 0x01	; 1
    1a3a:	08 c0       	rjmp	.+16     	; 0x1a4c <agps_update+0x112>
    1a3c:	80 ed       	ldi	r24, 0xD0	; 208
    1a3e:	97 e0       	ldi	r25, 0x07	; 7
    1a40:	f8 01       	movw	r30, r16
    1a42:	31 97       	sbiw	r30, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <agps_update+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a48:	d9 f7       	brne	.-10     	; 0x1a40 <agps_update+0x106>
    1a4a:	21 96       	adiw	r28, 0x01	; 1
    1a4c:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    1a50:	ca 97       	sbiw	r24, 0x3a	; 58
    1a52:	21 f0       	breq	.+8      	; 0x1a5c <agps_update+0x122>
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	cc 32       	cpi	r28, 0x2C	; 44
    1a58:	d8 07       	cpc	r29, r24
    1a5a:	81 f7       	brne	.-32     	; 0x1a3c <agps_update+0x102>
    1a5c:	84 ec       	ldi	r24, 0xC4	; 196
    1a5e:	99 e0       	ldi	r25, 0x09	; 9
    1a60:	20 e9       	ldi	r18, 0x90	; 144
    1a62:	31 e0       	ldi	r19, 0x01	; 1
    1a64:	f9 01       	movw	r30, r18
    1a66:	31 97       	sbiw	r30, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <agps_update+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	d9 f7       	brne	.-10     	; 0x1a64 <agps_update+0x12a>
    1a6e:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1a72:	8c ea       	ldi	r24, 0xAC	; 172
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1a7a:	84 ef       	ldi	r24, 0xF4	; 244
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1a82:	86 e9       	ldi	r24, 0x96	; 150
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1a8a:	84 ef       	ldi	r24, 0xF4	; 244
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1a92:	80 e2       	ldi	r24, 0x20	; 32
    1a94:	9e e4       	ldi	r25, 0x4E	; 78
    1a96:	20 e9       	ldi	r18, 0x90	; 144
    1a98:	31 e0       	ldi	r19, 0x01	; 1
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	31 97       	sbiw	r30, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <agps_update+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa2:	d9 f7       	brne	.-10     	; 0x1a9a <agps_update+0x160>
    1aa4:	21 e0       	ldi	r18, 0x01	; 1
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	c9 01       	movw	r24, r18
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	08 95       	ret

00001ab4 <gps_init>:
    1ab4:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1ab8:	86 e0       	ldi	r24, 0x06	; 6
    1aba:	93 e0       	ldi	r25, 0x03	; 3
    1abc:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1ac0:	88 ec       	ldi	r24, 0xC8	; 200
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1ac8:	87 ef       	ldi	r24, 0xF7	; 247
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1ad0:	88 ec       	ldi	r24, 0xC8	; 200
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	08 95       	ret

00001ade <epo_time>:
    1ade:	80 ed       	ldi	r24, 0xD0	; 208
    1ae0:	97 e0       	ldi	r25, 0x07	; 7
    1ae2:	20 e9       	ldi	r18, 0x90	; 144
    1ae4:	31 e0       	ldi	r19, 0x01	; 1
    1ae6:	f9 01       	movw	r30, r18
    1ae8:	31 97       	sbiw	r30, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <epo_time+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aee:	d9 f7       	brne	.-10     	; 0x1ae6 <epo_time+0x8>
    1af0:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1af4:	85 e1       	ldi	r24, 0x15	; 21
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1afc:	88 ec       	ldi	r24, 0xC8	; 200
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1b04:	84 ea       	ldi	r24, 0xA4	; 164
    1b06:	92 e0       	ldi	r25, 0x02	; 2
    1b08:	6c e2       	ldi	r22, 0x2C	; 44
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <strrchr>
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
    1b16:	80 93 5d 03 	sts	0x035D, r24
    1b1a:	90 93 5e 03 	sts	0x035E, r25
    1b1e:	08 95       	ret

00001b20 <agps_init>:
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <epo_time>
    1b2c:	89 2b       	or	r24, r25
    1b2e:	11 f4       	brne	.+4      	; 0x1b34 <agps_init+0x14>
    1b30:	0e 94 9d 0c 	call	0x193a	; 0x193a <agps_update>
    1b34:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <epo_time>
    1b38:	18 16       	cp	r1, r24
    1b3a:	19 06       	cpc	r1, r25
    1b3c:	0c f0       	brlt	.+2      	; 0x1b40 <agps_init+0x20>
    1b3e:	45 c0       	rjmp	.+138    	; 0x1bca <agps_init+0xaa>
    1b40:	83 ea       	ldi	r24, 0xA3	; 163
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 b5 02 	call	0x56a	; 0x56a <serial_string>
    1b48:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    1b4c:	8b 34       	cpi	r24, 0x4B	; 75
    1b4e:	91 05       	cpc	r25, r1
    1b50:	d9 f7       	brne	.-10     	; 0x1b48 <agps_init+0x28>
    1b52:	80 ed       	ldi	r24, 0xD0	; 208
    1b54:	97 e0       	ldi	r25, 0x07	; 7
    1b56:	20 e9       	ldi	r18, 0x90	; 144
    1b58:	31 e0       	ldi	r19, 0x01	; 1
    1b5a:	f9 01       	movw	r30, r18
    1b5c:	31 97       	sbiw	r30, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <agps_init+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	d9 f7       	brne	.-10     	; 0x1b5a <agps_init+0x3a>
    1b64:	88 ee       	ldi	r24, 0xE8	; 232
    1b66:	92 e0       	ldi	r25, 0x02	; 2
    1b68:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1b6c:	88 ec       	ldi	r24, 0xC8	; 200
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1b74:	84 ec       	ldi	r24, 0xC4	; 196
    1b76:	99 e0       	ldi	r25, 0x09	; 9
    1b78:	20 e9       	ldi	r18, 0x90	; 144
    1b7a:	31 e0       	ldi	r19, 0x01	; 1
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	31 97       	sbiw	r30, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <agps_init+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	d9 f7       	brne	.-10     	; 0x1b7c <agps_init+0x5c>
    1b86:	84 ed       	ldi	r24, 0xD4	; 212
    1b88:	92 e0       	ldi	r25, 0x02	; 2
    1b8a:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1b8e:	88 ec       	ldi	r24, 0xC8	; 200
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1b96:	c0 e0       	ldi	r28, 0x00	; 0
    1b98:	d0 e0       	ldi	r29, 0x00	; 0
    1b9a:	00 ea       	ldi	r16, 0xA0	; 160
    1b9c:	1f e0       	ldi	r17, 0x0F	; 15
    1b9e:	04 c0       	rjmp	.+8      	; 0x1ba8 <agps_init+0x88>
    1ba0:	21 96       	adiw	r28, 0x01	; 1
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <agps_init+0x84>
    1ba8:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    1bac:	ca 97       	sbiw	r24, 0x3a	; 58
    1bae:	21 f0       	breq	.+8      	; 0x1bb8 <agps_init+0x98>
    1bb0:	87 e2       	ldi	r24, 0x27	; 39
    1bb2:	c0 31       	cpi	r28, 0x10	; 16
    1bb4:	d8 07       	cpc	r29, r24
    1bb6:	a1 f7       	brne	.-24     	; 0x1ba0 <agps_init+0x80>
    1bb8:	80 e4       	ldi	r24, 0x40	; 64
    1bba:	9c e9       	ldi	r25, 0x9C	; 156
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <agps_init+0x9c>
    1bc0:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1bc4:	c0 51       	subi	r28, 0x10	; 16
    1bc6:	d7 42       	sbci	r29, 0x27	; 39
    1bc8:	91 f4       	brne	.+36     	; 0x1bee <agps_init+0xce>
    1bca:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1bce:	85 ec       	ldi	r24, 0xC5	; 197
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1bd6:	88 ec       	ldi	r24, 0xC8	; 200
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1bde:	86 eb       	ldi	r24, 0xB6	; 182
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <gsm_call>:
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	69 97       	sbiw	r28, 0x19	; 25
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	7c 01       	movw	r14, r24
    1c1a:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <gsm_call+0x24>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <gsm_call+0x26>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <gsm_call+0x28>
    1c24:	ed b7       	in	r30, 0x3d	; 61
    1c26:	fe b7       	in	r31, 0x3e	; 62
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	0f 5f       	subi	r16, 0xFF	; 255
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	ad b7       	in	r26, 0x3d	; 61
    1c32:	be b7       	in	r27, 0x3e	; 62
    1c34:	12 96       	adiw	r26, 0x02	; 2
    1c36:	1c 93       	st	X, r17
    1c38:	0e 93       	st	-X, r16
    1c3a:	11 97       	sbiw	r26, 0x01	; 1
    1c3c:	85 ec       	ldi	r24, 0xC5	; 197
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	93 83       	std	Z+3, r25	; 0x03
    1c42:	82 83       	std	Z+2, r24	; 0x02
    1c44:	f5 82       	std	Z+5, r15	; 0x05
    1c46:	e4 82       	std	Z+4, r14	; 0x04
    1c48:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <sprintf>
    1c4c:	8d b7       	in	r24, 0x3d	; 61
    1c4e:	9e b7       	in	r25, 0x3e	; 62
    1c50:	06 96       	adiw	r24, 0x06	; 6
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	9e bf       	out	0x3e, r25	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	8d bf       	out	0x3d, r24	; 61
    1c5c:	c8 01       	movw	r24, r16
    1c5e:	0e 94 b5 02 	call	0x56a	; 0x56a <serial_string>
    1c62:	80 ed       	ldi	r24, 0xD0	; 208
    1c64:	97 e0       	ldi	r25, 0x07	; 7
    1c66:	20 e9       	ldi	r18, 0x90	; 144
    1c68:	31 e0       	ldi	r19, 0x01	; 1
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	31 97       	sbiw	r30, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <gsm_call+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	d9 f7       	brne	.-10     	; 0x1c6a <gsm_call+0x6e>
    1c74:	69 96       	adiw	r28, 0x19	; 25
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	08 95       	ret

00001c8e <gsm_deletemsgall>:
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	c1 e0       	ldi	r28, 0x01	; 1
    1c98:	d0 e0       	ldi	r29, 0x00	; 0
    1c9a:	00 e9       	ldi	r16, 0x90	; 144
    1c9c:	11 e0       	ldi	r17, 0x01	; 1
    1c9e:	86 ec       	ldi	r24, 0xC6	; 198
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	0e 94 9b 05 	call	0xb36	; 0xb36 <serial_num>
    1cac:	83 ec       	ldi	r24, 0xC3	; 195
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1cb4:	80 ed       	ldi	r24, 0xD0	; 208
    1cb6:	97 e0       	ldi	r25, 0x07	; 7
    1cb8:	f8 01       	movw	r30, r16
    1cba:	31 97       	sbiw	r30, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <gsm_deletemsgall+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	d9 f7       	brne	.-10     	; 0x1cb8 <gsm_deletemsgall+0x2a>
    1cc2:	21 96       	adiw	r28, 0x01	; 1
    1cc4:	c3 31       	cpi	r28, 0x13	; 19
    1cc6:	d1 05       	cpc	r29, r1
    1cc8:	51 f7       	brne	.-44     	; 0x1c9e <gsm_deletemsgall+0x10>
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <WaitForResponse>:
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	6c 01       	movw	r12, r24
    1ce8:	ff 24       	eor	r15, r15
    1cea:	00 e0       	ldi	r16, 0x00	; 0
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	80 ea       	ldi	r24, 0xA0	; 160
    1cf0:	a8 2e       	mov	r10, r24
    1cf2:	8f e0       	ldi	r24, 0x0F	; 15
    1cf4:	b8 2e       	mov	r11, r24
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <WaitForResponse+0x2e>
    1cf8:	0f 5f       	subi	r16, 0xFF	; 255
    1cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfc:	c5 01       	movw	r24, r10
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <WaitForResponse+0x2a>
    1d02:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
    1d06:	89 2b       	or	r24, r25
    1d08:	19 f4       	brne	.+6      	; 0x1d10 <WaitForResponse+0x3c>
    1d0a:	0c 15       	cp	r16, r12
    1d0c:	1d 05       	cpc	r17, r13
    1d0e:	a0 f3       	brcs	.-24     	; 0x1cf8 <WaitForResponse+0x24>
    1d10:	0c 15       	cp	r16, r12
    1d12:	1d 05       	cpc	r17, r13
    1d14:	b1 f0       	breq	.+44     	; 0x1d42 <WaitForResponse+0x6e>
    1d16:	cf 2d       	mov	r28, r15
    1d18:	d0 e0       	ldi	r29, 0x00	; 0
    1d1a:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    1d1e:	cf 59       	subi	r28, 0x9F	; 159
    1d20:	dc 4f       	sbci	r29, 0xFC	; 252
    1d22:	88 83       	st	Y, r24
    1d24:	8a 30       	cpi	r24, 0x0A	; 10
    1d26:	59 f4       	brne	.+22     	; 0x1d3e <WaitForResponse+0x6a>
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	8f 15       	cp	r24, r15
    1d2c:	40 f4       	brcc	.+16     	; 0x1d3e <WaitForResponse+0x6a>
    1d2e:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1d32:	fe 01       	movw	r30, r28
    1d34:	31 97       	sbiw	r30, 0x01	; 1
    1d36:	10 82       	st	Z, r1
    1d38:	8f 2d       	mov	r24, r15
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <WaitForResponse+0x70>
    1d3e:	f3 94       	inc	r15
    1d40:	e0 cf       	rjmp	.-64     	; 0x1d02 <WaitForResponse+0x2e>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	bf 90       	pop	r11
    1d54:	af 90       	pop	r10
    1d56:	08 95       	ret

00001d58 <clk_check>:
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <clk_check+0xe>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1d70:	86 e2       	ldi	r24, 0x26	; 38
    1d72:	93 e0       	ldi	r25, 0x03	; 3
    1d74:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1d78:	88 ec       	ldi	r24, 0xC8	; 200
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1d80:	81 e6       	ldi	r24, 0x61	; 97
    1d82:	93 e0       	ldi	r25, 0x03	; 3
    1d84:	62 e2       	ldi	r22, 0x22	; 34
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	81 e6       	ldi	r24, 0x61	; 97
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	6f e2       	ldi	r22, 0x2F	; 47
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	10 82       	st	Z, r1
    1d9e:	0f 5f       	subi	r16, 0xFF	; 255
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	7e 01       	movw	r14, r28
    1da4:	08 94       	sec
    1da6:	e1 1c       	adc	r14, r1
    1da8:	f1 1c       	adc	r15, r1
    1daa:	c7 01       	movw	r24, r14
    1dac:	b8 01       	movw	r22, r16
    1dae:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    1db2:	c7 01       	movw	r24, r14
    1db4:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	41 97       	sbiw	r24, 0x11	; 17
    1dbe:	14 f0       	brlt	.+4      	; 0x1dc4 <clk_check+0x6c>
    1dc0:	21 e0       	ldi	r18, 0x01	; 1
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	08 95       	ret

00001dda <clk_init>:
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	c0 e0       	ldi	r28, 0x00	; 0
    1de4:	d0 e0       	ldi	r29, 0x00	; 0
    1de6:	00 e9       	ldi	r16, 0x90	; 144
    1de8:	11 e0       	ldi	r17, 0x01	; 1
    1dea:	08 c0       	rjmp	.+16     	; 0x1dfc <clk_init+0x22>
    1dec:	80 ed       	ldi	r24, 0xD0	; 208
    1dee:	97 e0       	ldi	r25, 0x07	; 7
    1df0:	f8 01       	movw	r30, r16
    1df2:	31 97       	sbiw	r30, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <clk_init+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	d9 f7       	brne	.-10     	; 0x1df0 <clk_init+0x16>
    1dfa:	21 96       	adiw	r28, 0x01	; 1
    1dfc:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <clk_check>
    1e00:	89 2b       	or	r24, r25
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <clk_init+0x30>
    1e04:	c4 36       	cpi	r28, 0x64	; 100
    1e06:	d1 05       	cpc	r29, r1
    1e08:	89 f7       	brne	.-30     	; 0x1dec <clk_init+0x12>
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	ec 97       	sbiw	r28, 0x3c	; 60
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <clk_init+0x3c>
    1e12:	21 e0       	ldi	r18, 0x01	; 1
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	c9 01       	movw	r24, r18
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <gsm_restart>:
    1e22:	84 e3       	ldi	r24, 0x34	; 52
    1e24:	93 e0       	ldi	r25, 0x03	; 3
    1e26:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1e2a:	88 ec       	ldi	r24, 0xC8	; 200
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1e32:	81 e6       	ldi	r24, 0x61	; 97
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	61 e3       	ldi	r22, 0x31	; 49
    1e38:	73 e0       	ldi	r23, 0x03	; 3
    1e3a:	0e 94 0b 13 	call	0x2616	; 0x2616 <strstr_P>
    1e3e:	89 2b       	or	r24, r25
    1e40:	b9 f4       	brne	.+46     	; 0x1e70 <gsm_restart+0x4e>
    1e42:	a3 9a       	sbi	0x14, 3	; 20
    1e44:	ab 9a       	sbi	0x15, 3	; 21
    1e46:	ab 98       	cbi	0x15, 3	; 21
    1e48:	84 e0       	ldi	r24, 0x04	; 4
    1e4a:	99 e2       	ldi	r25, 0x29	; 41
    1e4c:	20 e9       	ldi	r18, 0x90	; 144
    1e4e:	31 e0       	ldi	r19, 0x01	; 1
    1e50:	f9 01       	movw	r30, r18
    1e52:	31 97       	sbiw	r30, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <gsm_restart+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	d9 f7       	brne	.-10     	; 0x1e50 <gsm_restart+0x2e>
    1e5a:	ab 9a       	sbi	0x15, 3	; 21
    1e5c:	80 e5       	ldi	r24, 0x50	; 80
    1e5e:	93 ec       	ldi	r25, 0xC3	; 195
    1e60:	20 e9       	ldi	r18, 0x90	; 144
    1e62:	31 e0       	ldi	r19, 0x01	; 1
    1e64:	f9 01       	movw	r30, r18
    1e66:	31 97       	sbiw	r30, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <gsm_restart+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	d9 f7       	brne	.-10     	; 0x1e64 <gsm_restart+0x42>
    1e6e:	08 95       	ret
    1e70:	a3 9a       	sbi	0x14, 3	; 20
    1e72:	ab 9a       	sbi	0x15, 3	; 21
    1e74:	ab 98       	cbi	0x15, 3	; 21
    1e76:	84 e0       	ldi	r24, 0x04	; 4
    1e78:	99 e2       	ldi	r25, 0x29	; 41
    1e7a:	20 e9       	ldi	r18, 0x90	; 144
    1e7c:	31 e0       	ldi	r19, 0x01	; 1
    1e7e:	f9 01       	movw	r30, r18
    1e80:	31 97       	sbiw	r30, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <gsm_restart+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	d9 f7       	brne	.-10     	; 0x1e7e <gsm_restart+0x5c>
    1e88:	ab 9a       	sbi	0x15, 3	; 21
    1e8a:	80 e3       	ldi	r24, 0x30	; 48
    1e8c:	95 e7       	ldi	r25, 0x75	; 117
    1e8e:	20 e9       	ldi	r18, 0x90	; 144
    1e90:	31 e0       	ldi	r19, 0x01	; 1
    1e92:	f9 01       	movw	r30, r18
    1e94:	31 97       	sbiw	r30, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <gsm_restart+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	d9 f7       	brne	.-10     	; 0x1e92 <gsm_restart+0x70>
    1e9c:	ab 9a       	sbi	0x15, 3	; 21
    1e9e:	ab 98       	cbi	0x15, 3	; 21
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	99 e2       	ldi	r25, 0x29	; 41
    1ea4:	20 e9       	ldi	r18, 0x90	; 144
    1ea6:	31 e0       	ldi	r19, 0x01	; 1
    1ea8:	f9 01       	movw	r30, r18
    1eaa:	31 97       	sbiw	r30, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <gsm_restart+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb0:	d9 f7       	brne	.-10     	; 0x1ea8 <gsm_restart+0x86>
    1eb2:	ab 9a       	sbi	0x15, 3	; 21
    1eb4:	08 95       	ret

00001eb6 <gsm_pwroff>:
    1eb6:	89 e3       	ldi	r24, 0x39	; 57
    1eb8:	93 e0       	ldi	r25, 0x03	; 3
    1eba:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1ebe:	88 ec       	ldi	r24, 0xC8	; 200
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1ec6:	08 95       	ret

00001ec8 <init_config>:
    1ec8:	8d e4       	ldi	r24, 0x4D	; 77
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1ed8:	86 e4       	ldi	r24, 0x46	; 70
    1eda:	93 e0       	ldi	r25, 0x03	; 3
    1edc:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1ee0:	88 ec       	ldi	r24, 0xC8	; 200
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1ee8:	08 95       	ret

00001eea <gsm_initx>:
    1eea:	88 eb       	ldi	r24, 0xB8	; 184
    1eec:	93 e0       	ldi	r25, 0x03	; 3
    1eee:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1ef2:	88 ec       	ldi	r24, 0xC8	; 200
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1efa:	81 e6       	ldi	r24, 0x61	; 97
    1efc:	93 e0       	ldi	r25, 0x03	; 3
    1efe:	6d ea       	ldi	r22, 0xAD	; 173
    1f00:	73 e0       	ldi	r23, 0x03	; 3
    1f02:	0e 94 0b 13 	call	0x2616	; 0x2616 <strstr_P>
    1f06:	89 2b       	or	r24, r25
    1f08:	19 f0       	breq	.+6      	; 0x1f10 <gsm_initx+0x26>
    1f0a:	21 e0       	ldi	r18, 0x01	; 1
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	0b c0       	rjmp	.+22     	; 0x1f26 <gsm_initx+0x3c>
    1f10:	81 e6       	ldi	r24, 0x61	; 97
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	62 ea       	ldi	r22, 0xA2	; 162
    1f16:	73 e0       	ldi	r23, 0x03	; 3
    1f18:	0e 94 0b 13 	call	0x2616	; 0x2616 <strstr_P>
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	11 f0       	breq	.+4      	; 0x1f24 <gsm_initx+0x3a>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 01       	movw	r18, r24
    1f26:	c9 01       	movw	r24, r18
    1f28:	08 95       	ret

00001f2a <gsm_init>:
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	80 e1       	ldi	r24, 0x10	; 16
    1f34:	97 e2       	ldi	r25, 0x27	; 39
    1f36:	20 e9       	ldi	r18, 0x90	; 144
    1f38:	31 e0       	ldi	r19, 0x01	; 1
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	31 97       	sbiw	r30, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <gsm_init+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	d9 f7       	brne	.-10     	; 0x1f3a <gsm_init+0x10>
    1f44:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1f48:	8b e9       	ldi	r24, 0x9B	; 155
    1f4a:	93 e0       	ldi	r25, 0x03	; 3
    1f4c:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1f50:	88 ec       	ldi	r24, 0xC8	; 200
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1f58:	84 ef       	ldi	r24, 0xF4	; 244
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	20 e9       	ldi	r18, 0x90	; 144
    1f5e:	31 e0       	ldi	r19, 0x01	; 1
    1f60:	f9 01       	movw	r30, r18
    1f62:	31 97       	sbiw	r30, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <gsm_init+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	d9 f7       	brne	.-10     	; 0x1f60 <gsm_init+0x36>
    1f6a:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1f6e:	86 e9       	ldi	r24, 0x96	; 150
    1f70:	93 e0       	ldi	r25, 0x03	; 3
    1f72:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1f76:	88 ec       	ldi	r24, 0xC8	; 200
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1f7e:	81 e6       	ldi	r24, 0x61	; 97
    1f80:	93 e0       	ldi	r25, 0x03	; 3
    1f82:	63 e9       	ldi	r22, 0x93	; 147
    1f84:	73 e0       	ldi	r23, 0x03	; 3
    1f86:	0e 94 0b 13 	call	0x2616	; 0x2616 <strstr_P>
    1f8a:	89 2b       	or	r24, r25
    1f8c:	b1 f4       	brne	.+44     	; 0x1fba <gsm_init+0x90>
    1f8e:	a3 9a       	sbi	0x14, 3	; 20
    1f90:	ab 9a       	sbi	0x15, 3	; 21
    1f92:	ab 98       	cbi	0x15, 3	; 21
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	99 e2       	ldi	r25, 0x29	; 41
    1f98:	20 e9       	ldi	r18, 0x90	; 144
    1f9a:	31 e0       	ldi	r19, 0x01	; 1
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	31 97       	sbiw	r30, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <gsm_init+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	d9 f7       	brne	.-10     	; 0x1f9c <gsm_init+0x72>
    1fa6:	ab 9a       	sbi	0x15, 3	; 21
    1fa8:	80 e5       	ldi	r24, 0x50	; 80
    1faa:	93 ec       	ldi	r25, 0xC3	; 195
    1fac:	20 e9       	ldi	r18, 0x90	; 144
    1fae:	31 e0       	ldi	r19, 0x01	; 1
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	31 97       	sbiw	r30, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <gsm_init+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	d9 f7       	brne	.-10     	; 0x1fb0 <gsm_init+0x86>
    1fba:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1fbe:	8c e8       	ldi	r24, 0x8C	; 140
    1fc0:	93 e0       	ldi	r25, 0x03	; 3
    1fc2:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1fc6:	88 ec       	ldi	r24, 0xC8	; 200
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    1fce:	84 ef       	ldi	r24, 0xF4	; 244
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	20 e9       	ldi	r18, 0x90	; 144
    1fd4:	31 e0       	ldi	r19, 0x01	; 1
    1fd6:	f9 01       	movw	r30, r18
    1fd8:	31 97       	sbiw	r30, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <gsm_init+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fde:	d9 f7       	brne	.-10     	; 0x1fd6 <gsm_init+0xac>
    1fe0:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    1fe4:	8d e7       	ldi	r24, 0x7D	; 125
    1fe6:	93 e0       	ldi	r25, 0x03	; 3
    1fe8:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    1fec:	88 ec       	ldi	r24, 0xC8	; 200
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <WaitForGPResponse>
    1ff4:	84 ec       	ldi	r24, 0xC4	; 196
    1ff6:	99 e0       	ldi	r25, 0x09	; 9
    1ff8:	20 e9       	ldi	r18, 0x90	; 144
    1ffa:	31 e0       	ldi	r19, 0x01	; 1
    1ffc:	f9 01       	movw	r30, r18
    1ffe:	31 97       	sbiw	r30, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <gsm_init+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2002:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	d9 f7       	brne	.-10     	; 0x1ffc <gsm_init+0xd2>
    2006:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    200a:	82 e7       	ldi	r24, 0x72	; 114
    200c:	93 e0       	ldi	r25, 0x03	; 3
    200e:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    2012:	88 ec       	ldi	r24, 0xC8	; 200
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    201a:	81 e6       	ldi	r24, 0x61	; 97
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	65 e6       	ldi	r22, 0x65	; 101
    2020:	73 e0       	ldi	r23, 0x03	; 3
    2022:	0e 94 0b 13 	call	0x2616	; 0x2616 <strstr_P>
    2026:	89 2b       	or	r24, r25
    2028:	a9 f1       	breq	.+106    	; 0x2094 <gsm_init+0x16a>
    202a:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    202e:	89 e5       	ldi	r24, 0x59	; 89
    2030:	93 e0       	ldi	r25, 0x03	; 3
    2032:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    2036:	88 ec       	ldi	r24, 0xC8	; 200
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    203e:	84 ef       	ldi	r24, 0xF4	; 244
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	20 e9       	ldi	r18, 0x90	; 144
    2044:	31 e0       	ldi	r19, 0x01	; 1
    2046:	f9 01       	movw	r30, r18
    2048:	31 97       	sbiw	r30, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <gsm_init+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	d9 f7       	brne	.-10     	; 0x2046 <gsm_init+0x11c>
    2050:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    2054:	c0 e0       	ldi	r28, 0x00	; 0
    2056:	d0 e0       	ldi	r29, 0x00	; 0
    2058:	00 e9       	ldi	r16, 0x90	; 144
    205a:	11 e0       	ldi	r17, 0x01	; 1
    205c:	08 c0       	rjmp	.+16     	; 0x206e <gsm_init+0x144>
    205e:	80 ed       	ldi	r24, 0xD0	; 208
    2060:	97 e0       	ldi	r25, 0x07	; 7
    2062:	f8 01       	movw	r30, r16
    2064:	31 97       	sbiw	r30, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <gsm_init+0x13a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	d9 f7       	brne	.-10     	; 0x2062 <gsm_init+0x138>
    206c:	21 96       	adiw	r28, 0x01	; 1
    206e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <gsm_initx>
    2072:	89 2b       	or	r24, r25
    2074:	21 f0       	breq	.+8      	; 0x207e <gsm_init+0x154>
    2076:	c4 36       	cpi	r28, 0x64	; 100
    2078:	d1 05       	cpc	r29, r1
    207a:	29 f4       	brne	.+10     	; 0x2086 <gsm_init+0x15c>
    207c:	0b c0       	rjmp	.+22     	; 0x2094 <gsm_init+0x16a>
    207e:	c4 36       	cpi	r28, 0x64	; 100
    2080:	d1 05       	cpc	r29, r1
    2082:	69 f7       	brne	.-38     	; 0x205e <gsm_init+0x134>
    2084:	07 c0       	rjmp	.+14     	; 0x2094 <gsm_init+0x16a>
    2086:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <init_config>
    208a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <clk_init>
    208e:	21 e0       	ldi	r18, 0x01	; 1
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <gsm_init+0x16e>
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	c9 01       	movw	r24, r18
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	08 95       	ret

000020a4 <gsm_sendmsg_P>:
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	ec 01       	movw	r28, r24
    20ae:	8b 01       	movw	r16, r22
    20b0:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    20b4:	83 ed       	ldi	r24, 0xD3	; 211
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    20bc:	c8 01       	movw	r24, r16
    20be:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    20c2:	8f ec       	ldi	r24, 0xCF	; 207
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    20ca:	80 ed       	ldi	r24, 0xD0	; 208
    20cc:	97 e0       	ldi	r25, 0x07	; 7
    20ce:	20 e9       	ldi	r18, 0x90	; 144
    20d0:	31 e0       	ldi	r19, 0x01	; 1
    20d2:	f9 01       	movw	r30, r18
    20d4:	31 97       	sbiw	r30, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <gsm_sendmsg_P+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	d9 f7       	brne	.-10     	; 0x20d2 <gsm_sendmsg_P+0x2e>
    20dc:	88 ee       	ldi	r24, 0xE8	; 232
    20de:	93 e0       	ldi	r25, 0x03	; 3
    20e0:	20 e9       	ldi	r18, 0x90	; 144
    20e2:	31 e0       	ldi	r19, 0x01	; 1
    20e4:	f9 01       	movw	r30, r18
    20e6:	31 97       	sbiw	r30, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <gsm_sendmsg_P+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	d9 f7       	brne	.-10     	; 0x20e4 <gsm_sendmsg_P+0x40>
    20ee:	ce 01       	movw	r24, r28
    20f0:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    20f4:	88 ee       	ldi	r24, 0xE8	; 232
    20f6:	93 e0       	ldi	r25, 0x03	; 3
    20f8:	20 e9       	ldi	r18, 0x90	; 144
    20fa:	31 e0       	ldi	r19, 0x01	; 1
    20fc:	f9 01       	movw	r30, r18
    20fe:	31 97       	sbiw	r30, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <gsm_sendmsg_P+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	d9 f7       	brne	.-10     	; 0x20fc <gsm_sendmsg_P+0x58>
    2106:	8a e1       	ldi	r24, 0x1A	; 26
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 b1 02 	call	0x562	; 0x562 <serial_char>
    210e:	88 ec       	ldi	r24, 0xC8	; 200
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    2116:	10 92 61 03 	sts	0x0361, r1
    211a:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    211e:	80 e3       	ldi	r24, 0x30	; 48
    2120:	95 e7       	ldi	r25, 0x75	; 117
    2122:	20 e9       	ldi	r18, 0x90	; 144
    2124:	31 e0       	ldi	r19, 0x01	; 1
    2126:	f9 01       	movw	r30, r18
    2128:	31 97       	sbiw	r30, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <gsm_sendmsg_P+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	d9 f7       	brne	.-10     	; 0x2126 <gsm_sendmsg_P+0x82>
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	08 95       	ret

0000213a <gsm_sendmsg>:
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	ec 01       	movw	r28, r24
    2144:	8b 01       	movw	r16, r22
    2146:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    214a:	81 ee       	ldi	r24, 0xE1	; 225
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    2152:	c8 01       	movw	r24, r16
    2154:	0e 94 b5 02 	call	0x56a	; 0x56a <serial_string>
    2158:	8d ed       	ldi	r24, 0xDD	; 221
    215a:	93 e0       	ldi	r25, 0x03	; 3
    215c:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    2160:	80 ed       	ldi	r24, 0xD0	; 208
    2162:	97 e0       	ldi	r25, 0x07	; 7
    2164:	20 e9       	ldi	r18, 0x90	; 144
    2166:	31 e0       	ldi	r19, 0x01	; 1
    2168:	f9 01       	movw	r30, r18
    216a:	31 97       	sbiw	r30, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <gsm_sendmsg+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	d9 f7       	brne	.-10     	; 0x2168 <gsm_sendmsg+0x2e>
    2172:	88 ee       	ldi	r24, 0xE8	; 232
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	20 e9       	ldi	r18, 0x90	; 144
    2178:	31 e0       	ldi	r19, 0x01	; 1
    217a:	f9 01       	movw	r30, r18
    217c:	31 97       	sbiw	r30, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <gsm_sendmsg+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	d9 f7       	brne	.-10     	; 0x217a <gsm_sendmsg+0x40>
    2184:	ce 01       	movw	r24, r28
    2186:	0e 94 b5 02 	call	0x56a	; 0x56a <serial_string>
    218a:	88 ee       	ldi	r24, 0xE8	; 232
    218c:	93 e0       	ldi	r25, 0x03	; 3
    218e:	20 e9       	ldi	r18, 0x90	; 144
    2190:	31 e0       	ldi	r19, 0x01	; 1
    2192:	f9 01       	movw	r30, r18
    2194:	31 97       	sbiw	r30, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <gsm_sendmsg+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219a:	d9 f7       	brne	.-10     	; 0x2192 <gsm_sendmsg+0x58>
    219c:	8a e1       	ldi	r24, 0x1A	; 26
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 b1 02 	call	0x562	; 0x562 <serial_char>
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    21ac:	10 92 61 03 	sts	0x0361, r1
    21b0:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    21b4:	80 e3       	ldi	r24, 0x30	; 48
    21b6:	95 e7       	ldi	r25, 0x75	; 117
    21b8:	20 e9       	ldi	r18, 0x90	; 144
    21ba:	31 e0       	ldi	r19, 0x01	; 1
    21bc:	f9 01       	movw	r30, r18
    21be:	31 97       	sbiw	r30, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <gsm_sendmsg+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	d9 f7       	brne	.-10     	; 0x21bc <gsm_sendmsg+0x82>
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	08 95       	ret

000021d0 <gsm_readmsg>:
    21d0:	8f 92       	push	r8
    21d2:	9f 92       	push	r9
    21d4:	af 92       	push	r10
    21d6:	bf 92       	push	r11
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	5c 01       	movw	r10, r24
    21ea:	6b 01       	movw	r12, r22
    21ec:	80 91 5f 03 	lds	r24, 0x035F
    21f0:	90 91 60 03 	lds	r25, 0x0360
    21f4:	89 2b       	or	r24, r25
    21f6:	31 f4       	brne	.+12     	; 0x2204 <gsm_readmsg+0x34>
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	90 93 60 03 	sts	0x0360, r25
    2200:	80 93 5f 03 	sts	0x035F, r24
    2204:	c0 e0       	ldi	r28, 0x00	; 0
    2206:	d0 e0       	ldi	r29, 0x00	; 0
    2208:	90 e9       	ldi	r25, 0x90	; 144
    220a:	89 2e       	mov	r8, r25
    220c:	91 e0       	ldi	r25, 0x01	; 1
    220e:	99 2e       	mov	r9, r25
    2210:	0e 94 7d 03 	call	0x6fa	; 0x6fa <urclear>
    2214:	e1 e6       	ldi	r30, 0x61	; 97
    2216:	f3 e0       	ldi	r31, 0x03	; 3
    2218:	11 92       	st	Z+, r1
    221a:	83 e0       	ldi	r24, 0x03	; 3
    221c:	e1 3e       	cpi	r30, 0xE1	; 225
    221e:	f8 07       	cpc	r31, r24
    2220:	d9 f7       	brne	.-10     	; 0x2218 <gsm_readmsg+0x48>
    2222:	0e 94 07 03 	call	0x60e	; 0x60e <s_clearbuffer>
    2226:	8a ef       	ldi	r24, 0xFA	; 250
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    222e:	80 91 5f 03 	lds	r24, 0x035F
    2232:	90 91 60 03 	lds	r25, 0x0360
    2236:	0e 94 9b 05 	call	0xb36	; 0xb36 <serial_num>
    223a:	87 ef       	ldi	r24, 0xF7	; 247
    223c:	93 e0       	ldi	r25, 0x03	; 3
    223e:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    2242:	84 e6       	ldi	r24, 0x64	; 100
    2244:	99 e1       	ldi	r25, 0x19	; 25
    2246:	f4 01       	movw	r30, r8
    2248:	31 97       	sbiw	r30, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <gsm_readmsg+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	d9 f7       	brne	.-10     	; 0x2246 <gsm_readmsg+0x76>
    2250:	00 e0       	ldi	r16, 0x00	; 0
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <gsm_readmsg+0x94>
    2254:	0e 94 8c 02 	call	0x518	; 0x518 <serial_read>
    2258:	e0 2f       	mov	r30, r16
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	ef 59       	subi	r30, 0x9F	; 159
    225e:	fc 4f       	sbci	r31, 0xFC	; 252
    2260:	80 83       	st	Z, r24
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	0e 94 e5 02 	call	0x5ca	; 0x5ca <serial_available>
    2268:	18 16       	cp	r1, r24
    226a:	19 06       	cpc	r1, r25
    226c:	9c f3       	brlt	.-26     	; 0x2254 <gsm_readmsg+0x84>
    226e:	00 00       	nop
    2270:	81 e6       	ldi	r24, 0x61	; 97
    2272:	93 e0       	ldi	r25, 0x03	; 3
    2274:	62 e2       	ldi	r22, 0x22	; 34
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	62 e2       	ldi	r22, 0x22	; 34
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	62 e2       	ldi	r22, 0x22	; 34
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    2290:	7c 01       	movw	r14, r24
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	62 e2       	ldi	r22, 0x22	; 34
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	62 e2       	ldi	r22, 0x22	; 34
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	62 e2       	ldi	r22, 0x22	; 34
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	62 e2       	ldi	r22, 0x22	; 34
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	62 e2       	ldi	r22, 0x22	; 34
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	6a e0       	ldi	r22, 0x0A	; 10
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    22ce:	8c 01       	movw	r16, r24
    22d0:	0f 5f       	subi	r16, 0xFF	; 255
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	c8 01       	movw	r24, r16
    22d6:	6d e0       	ldi	r22, 0x0D	; 13
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    22de:	fc 01       	movw	r30, r24
    22e0:	10 82       	st	Z, r1
    22e2:	c5 01       	movw	r24, r10
    22e4:	b8 01       	movw	r22, r16
    22e6:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    22ea:	c7 01       	movw	r24, r14
    22ec:	6b e2       	ldi	r22, 0x2B	; 43
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    22f4:	bc 01       	movw	r22, r24
    22f6:	6d 5f       	subi	r22, 0xFD	; 253
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	c6 01       	movw	r24, r12
    22fc:	4a e0       	ldi	r20, 0x0A	; 10
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	0e 94 4f 13 	call	0x269e	; 0x269e <strncpy>
    2304:	21 96       	adiw	r28, 0x01	; 1
    2306:	c2 30       	cpi	r28, 0x02	; 2
    2308:	d1 05       	cpc	r29, r1
    230a:	09 f0       	breq	.+2      	; 0x230e <gsm_readmsg+0x13e>
    230c:	81 cf       	rjmp	.-254    	; 0x2210 <gsm_readmsg+0x40>
    230e:	8e ee       	ldi	r24, 0xEE	; 238
    2310:	93 e0       	ldi	r25, 0x03	; 3
    2312:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    2316:	80 91 5f 03 	lds	r24, 0x035F
    231a:	90 91 60 03 	lds	r25, 0x0360
    231e:	0e 94 9b 05 	call	0xb36	; 0xb36 <serial_num>
    2322:	8b ee       	ldi	r24, 0xEB	; 235
    2324:	93 e0       	ldi	r25, 0x03	; 3
    2326:	0e 94 bf 02 	call	0x57e	; 0x57e <serial_string_P>
    232a:	88 ec       	ldi	r24, 0xC8	; 200
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    2332:	10 92 61 03 	sts	0x0361, r1
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	cf 90       	pop	r12
    2346:	bf 90       	pop	r11
    2348:	af 90       	pop	r10
    234a:	9f 90       	pop	r9
    234c:	8f 90       	pop	r8
    234e:	08 95       	ret

00002350 <gsm_waitformsg>:
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <gsm_waitformsg+0xa>
    235a:	00 d0       	rcall	.+0      	; 0x235c <gsm_waitformsg+0xc>
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <WaitForResponse>
    2368:	88 23       	and	r24, r24
    236a:	51 f1       	breq	.+84     	; 0x23c0 <gsm_waitformsg+0x70>
    236c:	e8 2f       	mov	r30, r24
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	ef 59       	subi	r30, 0x9F	; 159
    2372:	fc 4f       	sbci	r31, 0xFC	; 252
    2374:	10 82       	st	Z, r1
    2376:	83 e6       	ldi	r24, 0x63	; 99
    2378:	93 e0       	ldi	r25, 0x03	; 3
    237a:	63 e0       	ldi	r22, 0x03	; 3
    237c:	74 e0       	ldi	r23, 0x04	; 4
    237e:	46 e0       	ldi	r20, 0x06	; 6
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <strncasecmp_P>
    2386:	89 2b       	or	r24, r25
    2388:	d9 f4       	brne	.+54     	; 0x23c0 <gsm_waitformsg+0x70>
    238a:	81 e6       	ldi	r24, 0x61	; 97
    238c:	93 e0       	ldi	r25, 0x03	; 3
    238e:	6c e2       	ldi	r22, 0x2C	; 44
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	0e 94 25 13 	call	0x264a	; 0x264a <strchr>
    2396:	bc 01       	movw	r22, r24
    2398:	6f 5f       	subi	r22, 0xFF	; 255
    239a:	7f 4f       	sbci	r23, 0xFF	; 255
    239c:	8e 01       	movw	r16, r28
    239e:	0f 5f       	subi	r16, 0xFF	; 255
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	c8 01       	movw	r24, r16
    23a4:	0e 94 30 13 	call	0x2660	; 0x2660 <strcpy>
    23a8:	c8 01       	movw	r24, r16
    23aa:	0e 94 d5 12 	call	0x25aa	; 0x25aa <atoi>
    23ae:	90 93 60 03 	sts	0x0360, r25
    23b2:	80 93 5f 03 	sts	0x035F, r24
    23b6:	10 92 61 03 	sts	0x0361, r1
    23ba:	21 e0       	ldi	r18, 0x01	; 1
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <gsm_waitformsg+0x74>
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	c9 01       	movw	r24, r18
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	08 95       	ret

000023d8 <timer_start>:
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	90 93 04 04 	sts	0x0404, r25
    23e0:	80 93 03 04 	sts	0x0403, r24
    23e4:	1d bc       	out	0x2d, r1	; 45
    23e6:	1c bc       	out	0x2c, r1	; 44
    23e8:	85 e0       	ldi	r24, 0x05	; 5
    23ea:	8e bd       	out	0x2e, r24	; 46
    23ec:	84 e0       	ldi	r24, 0x04	; 4
    23ee:	89 bf       	out	0x39, r24	; 57
    23f0:	08 95       	ret

000023f2 <stop_timeout>:
    23f2:	88 e1       	ldi	r24, 0x18	; 24
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	81 bd       	out	0x21, r24	; 33
    23fa:	11 bc       	out	0x21, r1	; 33
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	10 92 04 04 	sts	0x0404, r1
    2402:	10 92 03 04 	sts	0x0403, r1
    2406:	1d bc       	out	0x2d, r1	; 45
    2408:	1c bc       	out	0x2c, r1	; 44
    240a:	1e bc       	out	0x2e, r1	; 46
    240c:	19 be       	out	0x39, r1	; 57
    240e:	08 95       	ret

00002410 <reset_timeout>:
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	90 93 04 04 	sts	0x0404, r25
    2418:	80 93 03 04 	sts	0x0403, r24
    241c:	19 be       	out	0x39, r1	; 57
    241e:	1e bc       	out	0x2e, r1	; 46
    2420:	1d bc       	out	0x2d, r1	; 45
    2422:	1c bc       	out	0x2c, r1	; 44
    2424:	85 e0       	ldi	r24, 0x05	; 5
    2426:	8e bd       	out	0x2e, r24	; 46
    2428:	84 e0       	ldi	r24, 0x04	; 4
    242a:	89 bf       	out	0x39, r24	; 57
    242c:	08 95       	ret

0000242e <set_timeout>:
    242e:	78 94       	sei
    2430:	21 e0       	ldi	r18, 0x01	; 1
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	30 93 04 04 	sts	0x0404, r19
    2438:	20 93 03 04 	sts	0x0403, r18
    243c:	1d bc       	out	0x2d, r1	; 45
    243e:	1c bc       	out	0x2c, r1	; 44
    2440:	25 e0       	ldi	r18, 0x05	; 5
    2442:	2e bd       	out	0x2e, r18	; 46
    2444:	24 e0       	ldi	r18, 0x04	; 4
    2446:	29 bf       	out	0x39, r18	; 57
    2448:	65 e0       	ldi	r22, 0x05	; 5
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__divmodhi4>
    2450:	70 93 02 04 	sts	0x0402, r23
    2454:	60 93 01 04 	sts	0x0401, r22
    2458:	08 95       	ret

0000245a <__vector_9>:
    245a:	1f 92       	push	r1
    245c:	0f 92       	push	r0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	0f 92       	push	r0
    2462:	11 24       	eor	r1, r1
    2464:	2f 93       	push	r18
    2466:	3f 93       	push	r19
    2468:	8f 93       	push	r24
    246a:	9f 93       	push	r25
    246c:	20 91 03 04 	lds	r18, 0x0403
    2470:	30 91 04 04 	lds	r19, 0x0404
    2474:	80 91 01 04 	lds	r24, 0x0401
    2478:	90 91 02 04 	lds	r25, 0x0402
    247c:	28 17       	cp	r18, r24
    247e:	39 07       	cpc	r19, r25
    2480:	10 f0       	brcs	.+4      	; 0x2486 <__vector_9+0x2c>
    2482:	8f e0       	ldi	r24, 0x0F	; 15
    2484:	81 bd       	out	0x21, r24	; 33
    2486:	2f 5f       	subi	r18, 0xFF	; 255
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	30 93 04 04 	sts	0x0404, r19
    248e:	20 93 03 04 	sts	0x0403, r18
    2492:	9f 91       	pop	r25
    2494:	8f 91       	pop	r24
    2496:	3f 91       	pop	r19
    2498:	2f 91       	pop	r18
    249a:	0f 90       	pop	r0
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	0f 90       	pop	r0
    24a0:	1f 90       	pop	r1
    24a2:	18 95       	reti

000024a4 <__mulsi3>:
    24a4:	62 9f       	mul	r22, r18
    24a6:	d0 01       	movw	r26, r0
    24a8:	73 9f       	mul	r23, r19
    24aa:	f0 01       	movw	r30, r0
    24ac:	82 9f       	mul	r24, r18
    24ae:	e0 0d       	add	r30, r0
    24b0:	f1 1d       	adc	r31, r1
    24b2:	64 9f       	mul	r22, r20
    24b4:	e0 0d       	add	r30, r0
    24b6:	f1 1d       	adc	r31, r1
    24b8:	92 9f       	mul	r25, r18
    24ba:	f0 0d       	add	r31, r0
    24bc:	83 9f       	mul	r24, r19
    24be:	f0 0d       	add	r31, r0
    24c0:	74 9f       	mul	r23, r20
    24c2:	f0 0d       	add	r31, r0
    24c4:	65 9f       	mul	r22, r21
    24c6:	f0 0d       	add	r31, r0
    24c8:	99 27       	eor	r25, r25
    24ca:	72 9f       	mul	r23, r18
    24cc:	b0 0d       	add	r27, r0
    24ce:	e1 1d       	adc	r30, r1
    24d0:	f9 1f       	adc	r31, r25
    24d2:	63 9f       	mul	r22, r19
    24d4:	b0 0d       	add	r27, r0
    24d6:	e1 1d       	adc	r30, r1
    24d8:	f9 1f       	adc	r31, r25
    24da:	bd 01       	movw	r22, r26
    24dc:	cf 01       	movw	r24, r30
    24de:	11 24       	eor	r1, r1
    24e0:	08 95       	ret

000024e2 <__divmodhi4>:
    24e2:	97 fb       	bst	r25, 7
    24e4:	09 2e       	mov	r0, r25
    24e6:	07 26       	eor	r0, r23
    24e8:	0a d0       	rcall	.+20     	; 0x24fe <__divmodhi4_neg1>
    24ea:	77 fd       	sbrc	r23, 7
    24ec:	04 d0       	rcall	.+8      	; 0x24f6 <__divmodhi4_neg2>
    24ee:	49 d0       	rcall	.+146    	; 0x2582 <__udivmodhi4>
    24f0:	06 d0       	rcall	.+12     	; 0x24fe <__divmodhi4_neg1>
    24f2:	00 20       	and	r0, r0
    24f4:	1a f4       	brpl	.+6      	; 0x24fc <__divmodhi4_exit>

000024f6 <__divmodhi4_neg2>:
    24f6:	70 95       	com	r23
    24f8:	61 95       	neg	r22
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255

000024fc <__divmodhi4_exit>:
    24fc:	08 95       	ret

000024fe <__divmodhi4_neg1>:
    24fe:	f6 f7       	brtc	.-4      	; 0x24fc <__divmodhi4_exit>
    2500:	90 95       	com	r25
    2502:	81 95       	neg	r24
    2504:	9f 4f       	sbci	r25, 0xFF	; 255
    2506:	08 95       	ret

00002508 <__udivmodsi4>:
    2508:	a1 e2       	ldi	r26, 0x21	; 33
    250a:	1a 2e       	mov	r1, r26
    250c:	aa 1b       	sub	r26, r26
    250e:	bb 1b       	sub	r27, r27
    2510:	fd 01       	movw	r30, r26
    2512:	0d c0       	rjmp	.+26     	; 0x252e <__udivmodsi4_ep>

00002514 <__udivmodsi4_loop>:
    2514:	aa 1f       	adc	r26, r26
    2516:	bb 1f       	adc	r27, r27
    2518:	ee 1f       	adc	r30, r30
    251a:	ff 1f       	adc	r31, r31
    251c:	a2 17       	cp	r26, r18
    251e:	b3 07       	cpc	r27, r19
    2520:	e4 07       	cpc	r30, r20
    2522:	f5 07       	cpc	r31, r21
    2524:	20 f0       	brcs	.+8      	; 0x252e <__udivmodsi4_ep>
    2526:	a2 1b       	sub	r26, r18
    2528:	b3 0b       	sbc	r27, r19
    252a:	e4 0b       	sbc	r30, r20
    252c:	f5 0b       	sbc	r31, r21

0000252e <__udivmodsi4_ep>:
    252e:	66 1f       	adc	r22, r22
    2530:	77 1f       	adc	r23, r23
    2532:	88 1f       	adc	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	1a 94       	dec	r1
    2538:	69 f7       	brne	.-38     	; 0x2514 <__udivmodsi4_loop>
    253a:	60 95       	com	r22
    253c:	70 95       	com	r23
    253e:	80 95       	com	r24
    2540:	90 95       	com	r25
    2542:	9b 01       	movw	r18, r22
    2544:	ac 01       	movw	r20, r24
    2546:	bd 01       	movw	r22, r26
    2548:	cf 01       	movw	r24, r30
    254a:	08 95       	ret

0000254c <__divmodsi4>:
    254c:	97 fb       	bst	r25, 7
    254e:	09 2e       	mov	r0, r25
    2550:	05 26       	eor	r0, r21
    2552:	0e d0       	rcall	.+28     	; 0x2570 <__divmodsi4_neg1>
    2554:	57 fd       	sbrc	r21, 7
    2556:	04 d0       	rcall	.+8      	; 0x2560 <__divmodsi4_neg2>
    2558:	d7 df       	rcall	.-82     	; 0x2508 <__udivmodsi4>
    255a:	0a d0       	rcall	.+20     	; 0x2570 <__divmodsi4_neg1>
    255c:	00 1c       	adc	r0, r0
    255e:	38 f4       	brcc	.+14     	; 0x256e <__divmodsi4_exit>

00002560 <__divmodsi4_neg2>:
    2560:	50 95       	com	r21
    2562:	40 95       	com	r20
    2564:	30 95       	com	r19
    2566:	21 95       	neg	r18
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	4f 4f       	sbci	r20, 0xFF	; 255
    256c:	5f 4f       	sbci	r21, 0xFF	; 255

0000256e <__divmodsi4_exit>:
    256e:	08 95       	ret

00002570 <__divmodsi4_neg1>:
    2570:	f6 f7       	brtc	.-4      	; 0x256e <__divmodsi4_exit>
    2572:	90 95       	com	r25
    2574:	80 95       	com	r24
    2576:	70 95       	com	r23
    2578:	61 95       	neg	r22
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	8f 4f       	sbci	r24, 0xFF	; 255
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	08 95       	ret

00002582 <__udivmodhi4>:
    2582:	aa 1b       	sub	r26, r26
    2584:	bb 1b       	sub	r27, r27
    2586:	51 e1       	ldi	r21, 0x11	; 17
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <__udivmodhi4_ep>

0000258a <__udivmodhi4_loop>:
    258a:	aa 1f       	adc	r26, r26
    258c:	bb 1f       	adc	r27, r27
    258e:	a6 17       	cp	r26, r22
    2590:	b7 07       	cpc	r27, r23
    2592:	10 f0       	brcs	.+4      	; 0x2598 <__udivmodhi4_ep>
    2594:	a6 1b       	sub	r26, r22
    2596:	b7 0b       	sbc	r27, r23

00002598 <__udivmodhi4_ep>:
    2598:	88 1f       	adc	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	5a 95       	dec	r21
    259e:	a9 f7       	brne	.-22     	; 0x258a <__udivmodhi4_loop>
    25a0:	80 95       	com	r24
    25a2:	90 95       	com	r25
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	08 95       	ret

000025aa <atoi>:
    25aa:	fc 01       	movw	r30, r24
    25ac:	88 27       	eor	r24, r24
    25ae:	99 27       	eor	r25, r25
    25b0:	e8 94       	clt
    25b2:	21 91       	ld	r18, Z+
    25b4:	20 32       	cpi	r18, 0x20	; 32
    25b6:	e9 f3       	breq	.-6      	; 0x25b2 <atoi+0x8>
    25b8:	29 30       	cpi	r18, 0x09	; 9
    25ba:	10 f0       	brcs	.+4      	; 0x25c0 <atoi+0x16>
    25bc:	2e 30       	cpi	r18, 0x0E	; 14
    25be:	c8 f3       	brcs	.-14     	; 0x25b2 <atoi+0x8>
    25c0:	2b 32       	cpi	r18, 0x2B	; 43
    25c2:	41 f0       	breq	.+16     	; 0x25d4 <atoi+0x2a>
    25c4:	2d 32       	cpi	r18, 0x2D	; 45
    25c6:	39 f4       	brne	.+14     	; 0x25d6 <atoi+0x2c>
    25c8:	68 94       	set
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <atoi+0x2a>
    25cc:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__mulhi_const_10>
    25d0:	82 0f       	add	r24, r18
    25d2:	91 1d       	adc	r25, r1
    25d4:	21 91       	ld	r18, Z+
    25d6:	20 53       	subi	r18, 0x30	; 48
    25d8:	2a 30       	cpi	r18, 0x0A	; 10
    25da:	c0 f3       	brcs	.-16     	; 0x25cc <atoi+0x22>
    25dc:	1e f4       	brtc	.+6      	; 0x25e4 <atoi+0x3a>
    25de:	90 95       	com	r25
    25e0:	81 95       	neg	r24
    25e2:	9f 4f       	sbci	r25, 0xFF	; 255
    25e4:	08 95       	ret

000025e6 <strncasecmp_P>:
    25e6:	fb 01       	movw	r30, r22
    25e8:	dc 01       	movw	r26, r24
    25ea:	41 50       	subi	r20, 0x01	; 1
    25ec:	50 40       	sbci	r21, 0x00	; 0
    25ee:	88 f0       	brcs	.+34     	; 0x2612 <strncasecmp_P+0x2c>
    25f0:	8d 91       	ld	r24, X+
    25f2:	81 34       	cpi	r24, 0x41	; 65
    25f4:	1c f0       	brlt	.+6      	; 0x25fc <strncasecmp_P+0x16>
    25f6:	8b 35       	cpi	r24, 0x5B	; 91
    25f8:	0c f4       	brge	.+2      	; 0x25fc <strncasecmp_P+0x16>
    25fa:	80 5e       	subi	r24, 0xE0	; 224
    25fc:	65 91       	lpm	r22, Z+
    25fe:	61 34       	cpi	r22, 0x41	; 65
    2600:	1c f0       	brlt	.+6      	; 0x2608 <strncasecmp_P+0x22>
    2602:	6b 35       	cpi	r22, 0x5B	; 91
    2604:	0c f4       	brge	.+2      	; 0x2608 <strncasecmp_P+0x22>
    2606:	60 5e       	subi	r22, 0xE0	; 224
    2608:	86 1b       	sub	r24, r22
    260a:	61 11       	cpse	r22, r1
    260c:	71 f3       	breq	.-36     	; 0x25ea <strncasecmp_P+0x4>
    260e:	99 0b       	sbc	r25, r25
    2610:	08 95       	ret
    2612:	88 1b       	sub	r24, r24
    2614:	fc cf       	rjmp	.-8      	; 0x260e <strncasecmp_P+0x28>

00002616 <strstr_P>:
    2616:	fb 01       	movw	r30, r22
    2618:	55 91       	lpm	r21, Z+
    261a:	55 23       	and	r21, r21
    261c:	a9 f0       	breq	.+42     	; 0x2648 <strstr_P+0x32>
    261e:	bf 01       	movw	r22, r30
    2620:	dc 01       	movw	r26, r24
    2622:	4d 91       	ld	r20, X+
    2624:	45 17       	cp	r20, r21
    2626:	41 11       	cpse	r20, r1
    2628:	e1 f7       	brne	.-8      	; 0x2622 <strstr_P+0xc>
    262a:	59 f4       	brne	.+22     	; 0x2642 <strstr_P+0x2c>
    262c:	cd 01       	movw	r24, r26
    262e:	05 90       	lpm	r0, Z+
    2630:	00 20       	and	r0, r0
    2632:	49 f0       	breq	.+18     	; 0x2646 <strstr_P+0x30>
    2634:	4d 91       	ld	r20, X+
    2636:	40 15       	cp	r20, r0
    2638:	41 11       	cpse	r20, r1
    263a:	c9 f3       	breq	.-14     	; 0x262e <strstr_P+0x18>
    263c:	fb 01       	movw	r30, r22
    263e:	41 11       	cpse	r20, r1
    2640:	ef cf       	rjmp	.-34     	; 0x2620 <strstr_P+0xa>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	08 95       	ret

0000264a <strchr>:
    264a:	fc 01       	movw	r30, r24
    264c:	81 91       	ld	r24, Z+
    264e:	86 17       	cp	r24, r22
    2650:	21 f0       	breq	.+8      	; 0x265a <strchr+0x10>
    2652:	88 23       	and	r24, r24
    2654:	d9 f7       	brne	.-10     	; 0x264c <strchr+0x2>
    2656:	99 27       	eor	r25, r25
    2658:	08 95       	ret
    265a:	31 97       	sbiw	r30, 0x01	; 1
    265c:	cf 01       	movw	r24, r30
    265e:	08 95       	ret

00002660 <strcpy>:
    2660:	fb 01       	movw	r30, r22
    2662:	dc 01       	movw	r26, r24
    2664:	01 90       	ld	r0, Z+
    2666:	0d 92       	st	X+, r0
    2668:	00 20       	and	r0, r0
    266a:	e1 f7       	brne	.-8      	; 0x2664 <strcpy+0x4>
    266c:	08 95       	ret

0000266e <strncasecmp>:
    266e:	fb 01       	movw	r30, r22
    2670:	dc 01       	movw	r26, r24
    2672:	41 50       	subi	r20, 0x01	; 1
    2674:	50 40       	sbci	r21, 0x00	; 0
    2676:	88 f0       	brcs	.+34     	; 0x269a <strncasecmp+0x2c>
    2678:	8d 91       	ld	r24, X+
    267a:	81 34       	cpi	r24, 0x41	; 65
    267c:	1c f0       	brlt	.+6      	; 0x2684 <strncasecmp+0x16>
    267e:	8b 35       	cpi	r24, 0x5B	; 91
    2680:	0c f4       	brge	.+2      	; 0x2684 <strncasecmp+0x16>
    2682:	80 5e       	subi	r24, 0xE0	; 224
    2684:	61 91       	ld	r22, Z+
    2686:	61 34       	cpi	r22, 0x41	; 65
    2688:	1c f0       	brlt	.+6      	; 0x2690 <strncasecmp+0x22>
    268a:	6b 35       	cpi	r22, 0x5B	; 91
    268c:	0c f4       	brge	.+2      	; 0x2690 <strncasecmp+0x22>
    268e:	60 5e       	subi	r22, 0xE0	; 224
    2690:	86 1b       	sub	r24, r22
    2692:	61 11       	cpse	r22, r1
    2694:	71 f3       	breq	.-36     	; 0x2672 <strncasecmp+0x4>
    2696:	99 0b       	sbc	r25, r25
    2698:	08 95       	ret
    269a:	88 1b       	sub	r24, r24
    269c:	fc cf       	rjmp	.-8      	; 0x2696 <strncasecmp+0x28>

0000269e <strncpy>:
    269e:	fb 01       	movw	r30, r22
    26a0:	dc 01       	movw	r26, r24
    26a2:	41 50       	subi	r20, 0x01	; 1
    26a4:	50 40       	sbci	r21, 0x00	; 0
    26a6:	48 f0       	brcs	.+18     	; 0x26ba <strncpy+0x1c>
    26a8:	01 90       	ld	r0, Z+
    26aa:	0d 92       	st	X+, r0
    26ac:	00 20       	and	r0, r0
    26ae:	c9 f7       	brne	.-14     	; 0x26a2 <strncpy+0x4>
    26b0:	01 c0       	rjmp	.+2      	; 0x26b4 <strncpy+0x16>
    26b2:	1d 92       	st	X+, r1
    26b4:	41 50       	subi	r20, 0x01	; 1
    26b6:	50 40       	sbci	r21, 0x00	; 0
    26b8:	e0 f7       	brcc	.-8      	; 0x26b2 <strncpy+0x14>
    26ba:	08 95       	ret

000026bc <strrchr>:
    26bc:	fc 01       	movw	r30, r24
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	01 90       	ld	r0, Z+
    26c4:	06 16       	cp	r0, r22
    26c6:	09 f4       	brne	.+2      	; 0x26ca <strrchr+0xe>
    26c8:	cf 01       	movw	r24, r30
    26ca:	00 20       	and	r0, r0
    26cc:	d1 f7       	brne	.-12     	; 0x26c2 <strrchr+0x6>
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	08 95       	ret

000026d2 <strstr>:
    26d2:	fb 01       	movw	r30, r22
    26d4:	51 91       	ld	r21, Z+
    26d6:	55 23       	and	r21, r21
    26d8:	a9 f0       	breq	.+42     	; 0x2704 <strstr+0x32>
    26da:	bf 01       	movw	r22, r30
    26dc:	dc 01       	movw	r26, r24
    26de:	4d 91       	ld	r20, X+
    26e0:	45 17       	cp	r20, r21
    26e2:	41 11       	cpse	r20, r1
    26e4:	e1 f7       	brne	.-8      	; 0x26de <strstr+0xc>
    26e6:	59 f4       	brne	.+22     	; 0x26fe <strstr+0x2c>
    26e8:	cd 01       	movw	r24, r26
    26ea:	01 90       	ld	r0, Z+
    26ec:	00 20       	and	r0, r0
    26ee:	49 f0       	breq	.+18     	; 0x2702 <strstr+0x30>
    26f0:	4d 91       	ld	r20, X+
    26f2:	40 15       	cp	r20, r0
    26f4:	41 11       	cpse	r20, r1
    26f6:	c9 f3       	breq	.-14     	; 0x26ea <strstr+0x18>
    26f8:	fb 01       	movw	r30, r22
    26fa:	41 11       	cpse	r20, r1
    26fc:	ef cf       	rjmp	.-34     	; 0x26dc <strstr+0xa>
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	08 95       	ret

00002706 <itoa>:
    2706:	fb 01       	movw	r30, r22
    2708:	9f 01       	movw	r18, r30
    270a:	e8 94       	clt
    270c:	42 30       	cpi	r20, 0x02	; 2
    270e:	c4 f0       	brlt	.+48     	; 0x2740 <itoa+0x3a>
    2710:	45 32       	cpi	r20, 0x25	; 37
    2712:	b4 f4       	brge	.+44     	; 0x2740 <itoa+0x3a>
    2714:	4a 30       	cpi	r20, 0x0A	; 10
    2716:	29 f4       	brne	.+10     	; 0x2722 <itoa+0x1c>
    2718:	97 fb       	bst	r25, 7
    271a:	1e f4       	brtc	.+6      	; 0x2722 <itoa+0x1c>
    271c:	90 95       	com	r25
    271e:	81 95       	neg	r24
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	64 2f       	mov	r22, r20
    2724:	77 27       	eor	r23, r23
    2726:	0e 94 c1 12 	call	0x2582	; 0x2582 <__udivmodhi4>
    272a:	80 5d       	subi	r24, 0xD0	; 208
    272c:	8a 33       	cpi	r24, 0x3A	; 58
    272e:	0c f0       	brlt	.+2      	; 0x2732 <itoa+0x2c>
    2730:	89 5d       	subi	r24, 0xD9	; 217
    2732:	81 93       	st	Z+, r24
    2734:	cb 01       	movw	r24, r22
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	a1 f7       	brne	.-24     	; 0x2722 <itoa+0x1c>
    273a:	16 f4       	brtc	.+4      	; 0x2740 <itoa+0x3a>
    273c:	5d e2       	ldi	r21, 0x2D	; 45
    273e:	51 93       	st	Z+, r21
    2740:	10 82       	st	Z, r1
    2742:	c9 01       	movw	r24, r18
    2744:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <strrev>

00002748 <ltoa>:
    2748:	fa 01       	movw	r30, r20
    274a:	cf 93       	push	r28
    274c:	ff 93       	push	r31
    274e:	ef 93       	push	r30
    2750:	22 30       	cpi	r18, 0x02	; 2
    2752:	44 f1       	brlt	.+80     	; 0x27a4 <ltoa+0x5c>
    2754:	25 32       	cpi	r18, 0x25	; 37
    2756:	34 f5       	brge	.+76     	; 0x27a4 <ltoa+0x5c>
    2758:	c2 2f       	mov	r28, r18
    275a:	e8 94       	clt
    275c:	ca 30       	cpi	r28, 0x0A	; 10
    275e:	49 f4       	brne	.+18     	; 0x2772 <ltoa+0x2a>
    2760:	97 fb       	bst	r25, 7
    2762:	3e f4       	brtc	.+14     	; 0x2772 <ltoa+0x2a>
    2764:	90 95       	com	r25
    2766:	80 95       	com	r24
    2768:	70 95       	com	r23
    276a:	61 95       	neg	r22
    276c:	7f 4f       	sbci	r23, 0xFF	; 255
    276e:	8f 4f       	sbci	r24, 0xFF	; 255
    2770:	9f 4f       	sbci	r25, 0xFF	; 255
    2772:	2c 2f       	mov	r18, r28
    2774:	33 27       	eor	r19, r19
    2776:	44 27       	eor	r20, r20
    2778:	55 27       	eor	r21, r21
    277a:	ff 93       	push	r31
    277c:	ef 93       	push	r30
    277e:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodsi4>
    2782:	ef 91       	pop	r30
    2784:	ff 91       	pop	r31
    2786:	60 5d       	subi	r22, 0xD0	; 208
    2788:	6a 33       	cpi	r22, 0x3A	; 58
    278a:	0c f0       	brlt	.+2      	; 0x278e <ltoa+0x46>
    278c:	69 5d       	subi	r22, 0xD9	; 217
    278e:	61 93       	st	Z+, r22
    2790:	b9 01       	movw	r22, r18
    2792:	ca 01       	movw	r24, r20
    2794:	60 50       	subi	r22, 0x00	; 0
    2796:	70 40       	sbci	r23, 0x00	; 0
    2798:	80 40       	sbci	r24, 0x00	; 0
    279a:	90 40       	sbci	r25, 0x00	; 0
    279c:	51 f7       	brne	.-44     	; 0x2772 <ltoa+0x2a>
    279e:	16 f4       	brtc	.+4      	; 0x27a4 <ltoa+0x5c>
    27a0:	cd e2       	ldi	r28, 0x2D	; 45
    27a2:	c1 93       	st	Z+, r28
    27a4:	10 82       	st	Z, r1
    27a6:	8f 91       	pop	r24
    27a8:	9f 91       	pop	r25
    27aa:	cf 91       	pop	r28
    27ac:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <strrev>

000027b0 <__mulhi_const_10>:
    27b0:	7a e0       	ldi	r23, 0x0A	; 10
    27b2:	97 9f       	mul	r25, r23
    27b4:	90 2d       	mov	r25, r0
    27b6:	87 9f       	mul	r24, r23
    27b8:	80 2d       	mov	r24, r0
    27ba:	91 0d       	add	r25, r1
    27bc:	11 24       	eor	r1, r1
    27be:	08 95       	ret

000027c0 <sprintf>:
    27c0:	ae e0       	ldi	r26, 0x0E	; 14
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e6 ee       	ldi	r30, 0xE6	; 230
    27c6:	f3 e1       	ldi	r31, 0x13	; 19
    27c8:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__prologue_saves__+0x1c>
    27cc:	0d 89       	ldd	r16, Y+21	; 0x15
    27ce:	1e 89       	ldd	r17, Y+22	; 0x16
    27d0:	86 e0       	ldi	r24, 0x06	; 6
    27d2:	8c 83       	std	Y+4, r24	; 0x04
    27d4:	1a 83       	std	Y+2, r17	; 0x02
    27d6:	09 83       	std	Y+1, r16	; 0x01
    27d8:	8f ef       	ldi	r24, 0xFF	; 255
    27da:	9f e7       	ldi	r25, 0x7F	; 127
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	9e 01       	movw	r18, r28
    27e2:	27 5e       	subi	r18, 0xE7	; 231
    27e4:	3f 4f       	sbci	r19, 0xFF	; 255
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	6f 89       	ldd	r22, Y+23	; 0x17
    27ec:	78 8d       	ldd	r23, Y+24	; 0x18
    27ee:	a9 01       	movw	r20, r18
    27f0:	0e 94 04 14 	call	0x2808	; 0x2808 <vfprintf>
    27f4:	2f 81       	ldd	r18, Y+7	; 0x07
    27f6:	38 85       	ldd	r19, Y+8	; 0x08
    27f8:	02 0f       	add	r16, r18
    27fa:	13 1f       	adc	r17, r19
    27fc:	f8 01       	movw	r30, r16
    27fe:	10 82       	st	Z, r1
    2800:	2e 96       	adiw	r28, 0x0e	; 14
    2802:	e4 e0       	ldi	r30, 0x04	; 4
    2804:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__epilogue_restores__+0x1c>

00002808 <vfprintf>:
    2808:	ab e0       	ldi	r26, 0x0B	; 11
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	ea e0       	ldi	r30, 0x0A	; 10
    280e:	f4 e1       	ldi	r31, 0x14	; 20
    2810:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__>
    2814:	3c 01       	movw	r6, r24
    2816:	2b 01       	movw	r4, r22
    2818:	5a 01       	movw	r10, r20
    281a:	fc 01       	movw	r30, r24
    281c:	17 82       	std	Z+7, r1	; 0x07
    281e:	16 82       	std	Z+6, r1	; 0x06
    2820:	83 81       	ldd	r24, Z+3	; 0x03
    2822:	81 fd       	sbrc	r24, 1
    2824:	03 c0       	rjmp	.+6      	; 0x282c <vfprintf+0x24>
    2826:	6f ef       	ldi	r22, 0xFF	; 255
    2828:	7f ef       	ldi	r23, 0xFF	; 255
    282a:	c6 c1       	rjmp	.+908    	; 0x2bb8 <vfprintf+0x3b0>
    282c:	9a e0       	ldi	r25, 0x0A	; 10
    282e:	89 2e       	mov	r8, r25
    2830:	1e 01       	movw	r2, r28
    2832:	08 94       	sec
    2834:	21 1c       	adc	r2, r1
    2836:	31 1c       	adc	r3, r1
    2838:	f3 01       	movw	r30, r6
    283a:	23 81       	ldd	r18, Z+3	; 0x03
    283c:	f2 01       	movw	r30, r4
    283e:	23 fd       	sbrc	r18, 3
    2840:	85 91       	lpm	r24, Z+
    2842:	23 ff       	sbrs	r18, 3
    2844:	81 91       	ld	r24, Z+
    2846:	2f 01       	movw	r4, r30
    2848:	88 23       	and	r24, r24
    284a:	09 f4       	brne	.+2      	; 0x284e <vfprintf+0x46>
    284c:	b2 c1       	rjmp	.+868    	; 0x2bb2 <vfprintf+0x3aa>
    284e:	85 32       	cpi	r24, 0x25	; 37
    2850:	39 f4       	brne	.+14     	; 0x2860 <vfprintf+0x58>
    2852:	23 fd       	sbrc	r18, 3
    2854:	85 91       	lpm	r24, Z+
    2856:	23 ff       	sbrs	r18, 3
    2858:	81 91       	ld	r24, Z+
    285a:	2f 01       	movw	r4, r30
    285c:	85 32       	cpi	r24, 0x25	; 37
    285e:	29 f4       	brne	.+10     	; 0x286a <vfprintf+0x62>
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	b3 01       	movw	r22, r6
    2864:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2868:	e7 cf       	rjmp	.-50     	; 0x2838 <vfprintf+0x30>
    286a:	98 2f       	mov	r25, r24
    286c:	ff 24       	eor	r15, r15
    286e:	ee 24       	eor	r14, r14
    2870:	99 24       	eor	r9, r9
    2872:	ff e1       	ldi	r31, 0x1F	; 31
    2874:	ff 15       	cp	r31, r15
    2876:	d0 f0       	brcs	.+52     	; 0x28ac <vfprintf+0xa4>
    2878:	9b 32       	cpi	r25, 0x2B	; 43
    287a:	69 f0       	breq	.+26     	; 0x2896 <vfprintf+0x8e>
    287c:	9c 32       	cpi	r25, 0x2C	; 44
    287e:	28 f4       	brcc	.+10     	; 0x288a <vfprintf+0x82>
    2880:	90 32       	cpi	r25, 0x20	; 32
    2882:	59 f0       	breq	.+22     	; 0x289a <vfprintf+0x92>
    2884:	93 32       	cpi	r25, 0x23	; 35
    2886:	91 f4       	brne	.+36     	; 0x28ac <vfprintf+0xa4>
    2888:	0e c0       	rjmp	.+28     	; 0x28a6 <vfprintf+0x9e>
    288a:	9d 32       	cpi	r25, 0x2D	; 45
    288c:	49 f0       	breq	.+18     	; 0x28a0 <vfprintf+0x98>
    288e:	90 33       	cpi	r25, 0x30	; 48
    2890:	69 f4       	brne	.+26     	; 0x28ac <vfprintf+0xa4>
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	24 c0       	rjmp	.+72     	; 0x28de <vfprintf+0xd6>
    2896:	52 e0       	ldi	r21, 0x02	; 2
    2898:	f5 2a       	or	r15, r21
    289a:	84 e0       	ldi	r24, 0x04	; 4
    289c:	f8 2a       	or	r15, r24
    289e:	28 c0       	rjmp	.+80     	; 0x28f0 <vfprintf+0xe8>
    28a0:	98 e0       	ldi	r25, 0x08	; 8
    28a2:	f9 2a       	or	r15, r25
    28a4:	25 c0       	rjmp	.+74     	; 0x28f0 <vfprintf+0xe8>
    28a6:	e0 e1       	ldi	r30, 0x10	; 16
    28a8:	fe 2a       	or	r15, r30
    28aa:	22 c0       	rjmp	.+68     	; 0x28f0 <vfprintf+0xe8>
    28ac:	f7 fc       	sbrc	r15, 7
    28ae:	29 c0       	rjmp	.+82     	; 0x2902 <vfprintf+0xfa>
    28b0:	89 2f       	mov	r24, r25
    28b2:	80 53       	subi	r24, 0x30	; 48
    28b4:	8a 30       	cpi	r24, 0x0A	; 10
    28b6:	70 f4       	brcc	.+28     	; 0x28d4 <vfprintf+0xcc>
    28b8:	f6 fe       	sbrs	r15, 6
    28ba:	05 c0       	rjmp	.+10     	; 0x28c6 <vfprintf+0xbe>
    28bc:	98 9c       	mul	r9, r8
    28be:	90 2c       	mov	r9, r0
    28c0:	11 24       	eor	r1, r1
    28c2:	98 0e       	add	r9, r24
    28c4:	15 c0       	rjmp	.+42     	; 0x28f0 <vfprintf+0xe8>
    28c6:	e8 9c       	mul	r14, r8
    28c8:	e0 2c       	mov	r14, r0
    28ca:	11 24       	eor	r1, r1
    28cc:	e8 0e       	add	r14, r24
    28ce:	f0 e2       	ldi	r31, 0x20	; 32
    28d0:	ff 2a       	or	r15, r31
    28d2:	0e c0       	rjmp	.+28     	; 0x28f0 <vfprintf+0xe8>
    28d4:	9e 32       	cpi	r25, 0x2E	; 46
    28d6:	29 f4       	brne	.+10     	; 0x28e2 <vfprintf+0xda>
    28d8:	f6 fc       	sbrc	r15, 6
    28da:	6b c1       	rjmp	.+726    	; 0x2bb2 <vfprintf+0x3aa>
    28dc:	40 e4       	ldi	r20, 0x40	; 64
    28de:	f4 2a       	or	r15, r20
    28e0:	07 c0       	rjmp	.+14     	; 0x28f0 <vfprintf+0xe8>
    28e2:	9c 36       	cpi	r25, 0x6C	; 108
    28e4:	19 f4       	brne	.+6      	; 0x28ec <vfprintf+0xe4>
    28e6:	50 e8       	ldi	r21, 0x80	; 128
    28e8:	f5 2a       	or	r15, r21
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <vfprintf+0xe8>
    28ec:	98 36       	cpi	r25, 0x68	; 104
    28ee:	49 f4       	brne	.+18     	; 0x2902 <vfprintf+0xfa>
    28f0:	f2 01       	movw	r30, r4
    28f2:	23 fd       	sbrc	r18, 3
    28f4:	95 91       	lpm	r25, Z+
    28f6:	23 ff       	sbrs	r18, 3
    28f8:	91 91       	ld	r25, Z+
    28fa:	2f 01       	movw	r4, r30
    28fc:	99 23       	and	r25, r25
    28fe:	09 f0       	breq	.+2      	; 0x2902 <vfprintf+0xfa>
    2900:	b8 cf       	rjmp	.-144    	; 0x2872 <vfprintf+0x6a>
    2902:	89 2f       	mov	r24, r25
    2904:	85 54       	subi	r24, 0x45	; 69
    2906:	83 30       	cpi	r24, 0x03	; 3
    2908:	18 f0       	brcs	.+6      	; 0x2910 <vfprintf+0x108>
    290a:	80 52       	subi	r24, 0x20	; 32
    290c:	83 30       	cpi	r24, 0x03	; 3
    290e:	38 f4       	brcc	.+14     	; 0x291e <vfprintf+0x116>
    2910:	44 e0       	ldi	r20, 0x04	; 4
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	a4 0e       	add	r10, r20
    2916:	b5 1e       	adc	r11, r21
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	59 83       	std	Y+1, r21	; 0x01
    291c:	0f c0       	rjmp	.+30     	; 0x293c <vfprintf+0x134>
    291e:	93 36       	cpi	r25, 0x63	; 99
    2920:	31 f0       	breq	.+12     	; 0x292e <vfprintf+0x126>
    2922:	93 37       	cpi	r25, 0x73	; 115
    2924:	79 f0       	breq	.+30     	; 0x2944 <vfprintf+0x13c>
    2926:	93 35       	cpi	r25, 0x53	; 83
    2928:	09 f0       	breq	.+2      	; 0x292c <vfprintf+0x124>
    292a:	56 c0       	rjmp	.+172    	; 0x29d8 <vfprintf+0x1d0>
    292c:	20 c0       	rjmp	.+64     	; 0x296e <vfprintf+0x166>
    292e:	f5 01       	movw	r30, r10
    2930:	80 81       	ld	r24, Z
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	42 e0       	ldi	r20, 0x02	; 2
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	a4 0e       	add	r10, r20
    293a:	b5 1e       	adc	r11, r21
    293c:	61 01       	movw	r12, r2
    293e:	01 e0       	ldi	r16, 0x01	; 1
    2940:	10 e0       	ldi	r17, 0x00	; 0
    2942:	12 c0       	rjmp	.+36     	; 0x2968 <vfprintf+0x160>
    2944:	f5 01       	movw	r30, r10
    2946:	c0 80       	ld	r12, Z
    2948:	d1 80       	ldd	r13, Z+1	; 0x01
    294a:	f6 fc       	sbrc	r15, 6
    294c:	03 c0       	rjmp	.+6      	; 0x2954 <vfprintf+0x14c>
    294e:	6f ef       	ldi	r22, 0xFF	; 255
    2950:	7f ef       	ldi	r23, 0xFF	; 255
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <vfprintf+0x150>
    2954:	69 2d       	mov	r22, r9
    2956:	70 e0       	ldi	r23, 0x00	; 0
    2958:	42 e0       	ldi	r20, 0x02	; 2
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	a4 0e       	add	r10, r20
    295e:	b5 1e       	adc	r11, r21
    2960:	c6 01       	movw	r24, r12
    2962:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <strnlen>
    2966:	8c 01       	movw	r16, r24
    2968:	5f e7       	ldi	r21, 0x7F	; 127
    296a:	f5 22       	and	r15, r21
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <vfprintf+0x18e>
    296e:	f5 01       	movw	r30, r10
    2970:	c0 80       	ld	r12, Z
    2972:	d1 80       	ldd	r13, Z+1	; 0x01
    2974:	f6 fc       	sbrc	r15, 6
    2976:	03 c0       	rjmp	.+6      	; 0x297e <vfprintf+0x176>
    2978:	6f ef       	ldi	r22, 0xFF	; 255
    297a:	7f ef       	ldi	r23, 0xFF	; 255
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <vfprintf+0x17a>
    297e:	69 2d       	mov	r22, r9
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	42 e0       	ldi	r20, 0x02	; 2
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	a4 0e       	add	r10, r20
    2988:	b5 1e       	adc	r11, r21
    298a:	c6 01       	movw	r24, r12
    298c:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <strnlen_P>
    2990:	8c 01       	movw	r16, r24
    2992:	50 e8       	ldi	r21, 0x80	; 128
    2994:	f5 2a       	or	r15, r21
    2996:	f3 fe       	sbrs	r15, 3
    2998:	07 c0       	rjmp	.+14     	; 0x29a8 <vfprintf+0x1a0>
    299a:	1a c0       	rjmp	.+52     	; 0x29d0 <vfprintf+0x1c8>
    299c:	80 e2       	ldi	r24, 0x20	; 32
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	b3 01       	movw	r22, r6
    29a2:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    29a6:	ea 94       	dec	r14
    29a8:	8e 2d       	mov	r24, r14
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	08 17       	cp	r16, r24
    29ae:	19 07       	cpc	r17, r25
    29b0:	a8 f3       	brcs	.-22     	; 0x299c <vfprintf+0x194>
    29b2:	0e c0       	rjmp	.+28     	; 0x29d0 <vfprintf+0x1c8>
    29b4:	f6 01       	movw	r30, r12
    29b6:	f7 fc       	sbrc	r15, 7
    29b8:	85 91       	lpm	r24, Z+
    29ba:	f7 fe       	sbrs	r15, 7
    29bc:	81 91       	ld	r24, Z+
    29be:	6f 01       	movw	r12, r30
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	b3 01       	movw	r22, r6
    29c4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    29c8:	e1 10       	cpse	r14, r1
    29ca:	ea 94       	dec	r14
    29cc:	01 50       	subi	r16, 0x01	; 1
    29ce:	10 40       	sbci	r17, 0x00	; 0
    29d0:	01 15       	cp	r16, r1
    29d2:	11 05       	cpc	r17, r1
    29d4:	79 f7       	brne	.-34     	; 0x29b4 <vfprintf+0x1ac>
    29d6:	ea c0       	rjmp	.+468    	; 0x2bac <vfprintf+0x3a4>
    29d8:	94 36       	cpi	r25, 0x64	; 100
    29da:	11 f0       	breq	.+4      	; 0x29e0 <vfprintf+0x1d8>
    29dc:	99 36       	cpi	r25, 0x69	; 105
    29de:	69 f5       	brne	.+90     	; 0x2a3a <vfprintf+0x232>
    29e0:	f7 fe       	sbrs	r15, 7
    29e2:	08 c0       	rjmp	.+16     	; 0x29f4 <vfprintf+0x1ec>
    29e4:	f5 01       	movw	r30, r10
    29e6:	20 81       	ld	r18, Z
    29e8:	31 81       	ldd	r19, Z+1	; 0x01
    29ea:	42 81       	ldd	r20, Z+2	; 0x02
    29ec:	53 81       	ldd	r21, Z+3	; 0x03
    29ee:	84 e0       	ldi	r24, 0x04	; 4
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0a c0       	rjmp	.+20     	; 0x2a08 <vfprintf+0x200>
    29f4:	f5 01       	movw	r30, r10
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	9c 01       	movw	r18, r24
    29fc:	44 27       	eor	r20, r20
    29fe:	37 fd       	sbrc	r19, 7
    2a00:	40 95       	com	r20
    2a02:	54 2f       	mov	r21, r20
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a8 0e       	add	r10, r24
    2a0a:	b9 1e       	adc	r11, r25
    2a0c:	9f e6       	ldi	r25, 0x6F	; 111
    2a0e:	f9 22       	and	r15, r25
    2a10:	57 ff       	sbrs	r21, 7
    2a12:	09 c0       	rjmp	.+18     	; 0x2a26 <vfprintf+0x21e>
    2a14:	50 95       	com	r21
    2a16:	40 95       	com	r20
    2a18:	30 95       	com	r19
    2a1a:	21 95       	neg	r18
    2a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a20:	5f 4f       	sbci	r21, 0xFF	; 255
    2a22:	e0 e8       	ldi	r30, 0x80	; 128
    2a24:	fe 2a       	or	r15, r30
    2a26:	ca 01       	movw	r24, r20
    2a28:	b9 01       	movw	r22, r18
    2a2a:	a1 01       	movw	r20, r2
    2a2c:	2a e0       	ldi	r18, 0x0A	; 10
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__ultoa_invert>
    2a34:	d8 2e       	mov	r13, r24
    2a36:	d2 18       	sub	r13, r2
    2a38:	40 c0       	rjmp	.+128    	; 0x2aba <vfprintf+0x2b2>
    2a3a:	95 37       	cpi	r25, 0x75	; 117
    2a3c:	29 f4       	brne	.+10     	; 0x2a48 <vfprintf+0x240>
    2a3e:	1f 2d       	mov	r17, r15
    2a40:	1f 7e       	andi	r17, 0xEF	; 239
    2a42:	2a e0       	ldi	r18, 0x0A	; 10
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	1d c0       	rjmp	.+58     	; 0x2a82 <vfprintf+0x27a>
    2a48:	1f 2d       	mov	r17, r15
    2a4a:	19 7f       	andi	r17, 0xF9	; 249
    2a4c:	9f 36       	cpi	r25, 0x6F	; 111
    2a4e:	61 f0       	breq	.+24     	; 0x2a68 <vfprintf+0x260>
    2a50:	90 37       	cpi	r25, 0x70	; 112
    2a52:	20 f4       	brcc	.+8      	; 0x2a5c <vfprintf+0x254>
    2a54:	98 35       	cpi	r25, 0x58	; 88
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <vfprintf+0x252>
    2a58:	ac c0       	rjmp	.+344    	; 0x2bb2 <vfprintf+0x3aa>
    2a5a:	0f c0       	rjmp	.+30     	; 0x2a7a <vfprintf+0x272>
    2a5c:	90 37       	cpi	r25, 0x70	; 112
    2a5e:	39 f0       	breq	.+14     	; 0x2a6e <vfprintf+0x266>
    2a60:	98 37       	cpi	r25, 0x78	; 120
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <vfprintf+0x25e>
    2a64:	a6 c0       	rjmp	.+332    	; 0x2bb2 <vfprintf+0x3aa>
    2a66:	04 c0       	rjmp	.+8      	; 0x2a70 <vfprintf+0x268>
    2a68:	28 e0       	ldi	r18, 0x08	; 8
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	0a c0       	rjmp	.+20     	; 0x2a82 <vfprintf+0x27a>
    2a6e:	10 61       	ori	r17, 0x10	; 16
    2a70:	14 fd       	sbrc	r17, 4
    2a72:	14 60       	ori	r17, 0x04	; 4
    2a74:	20 e1       	ldi	r18, 0x10	; 16
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	04 c0       	rjmp	.+8      	; 0x2a82 <vfprintf+0x27a>
    2a7a:	14 fd       	sbrc	r17, 4
    2a7c:	16 60       	ori	r17, 0x06	; 6
    2a7e:	20 e1       	ldi	r18, 0x10	; 16
    2a80:	32 e0       	ldi	r19, 0x02	; 2
    2a82:	17 ff       	sbrs	r17, 7
    2a84:	08 c0       	rjmp	.+16     	; 0x2a96 <vfprintf+0x28e>
    2a86:	f5 01       	movw	r30, r10
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	44 e0       	ldi	r20, 0x04	; 4
    2a92:	50 e0       	ldi	r21, 0x00	; 0
    2a94:	08 c0       	rjmp	.+16     	; 0x2aa6 <vfprintf+0x29e>
    2a96:	f5 01       	movw	r30, r10
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	42 e0       	ldi	r20, 0x02	; 2
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	a4 0e       	add	r10, r20
    2aa8:	b5 1e       	adc	r11, r21
    2aaa:	a1 01       	movw	r20, r2
    2aac:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__ultoa_invert>
    2ab0:	d8 2e       	mov	r13, r24
    2ab2:	d2 18       	sub	r13, r2
    2ab4:	8f e7       	ldi	r24, 0x7F	; 127
    2ab6:	f8 2e       	mov	r15, r24
    2ab8:	f1 22       	and	r15, r17
    2aba:	f6 fe       	sbrs	r15, 6
    2abc:	0b c0       	rjmp	.+22     	; 0x2ad4 <vfprintf+0x2cc>
    2abe:	5e ef       	ldi	r21, 0xFE	; 254
    2ac0:	f5 22       	and	r15, r21
    2ac2:	d9 14       	cp	r13, r9
    2ac4:	38 f4       	brcc	.+14     	; 0x2ad4 <vfprintf+0x2cc>
    2ac6:	f4 fe       	sbrs	r15, 4
    2ac8:	07 c0       	rjmp	.+14     	; 0x2ad8 <vfprintf+0x2d0>
    2aca:	f2 fc       	sbrc	r15, 2
    2acc:	05 c0       	rjmp	.+10     	; 0x2ad8 <vfprintf+0x2d0>
    2ace:	8f ee       	ldi	r24, 0xEF	; 239
    2ad0:	f8 22       	and	r15, r24
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <vfprintf+0x2d0>
    2ad4:	1d 2d       	mov	r17, r13
    2ad6:	01 c0       	rjmp	.+2      	; 0x2ada <vfprintf+0x2d2>
    2ad8:	19 2d       	mov	r17, r9
    2ada:	f4 fe       	sbrs	r15, 4
    2adc:	0d c0       	rjmp	.+26     	; 0x2af8 <vfprintf+0x2f0>
    2ade:	fe 01       	movw	r30, r28
    2ae0:	ed 0d       	add	r30, r13
    2ae2:	f1 1d       	adc	r31, r1
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 33       	cpi	r24, 0x30	; 48
    2ae8:	19 f4       	brne	.+6      	; 0x2af0 <vfprintf+0x2e8>
    2aea:	99 ee       	ldi	r25, 0xE9	; 233
    2aec:	f9 22       	and	r15, r25
    2aee:	08 c0       	rjmp	.+16     	; 0x2b00 <vfprintf+0x2f8>
    2af0:	1f 5f       	subi	r17, 0xFF	; 255
    2af2:	f2 fe       	sbrs	r15, 2
    2af4:	05 c0       	rjmp	.+10     	; 0x2b00 <vfprintf+0x2f8>
    2af6:	03 c0       	rjmp	.+6      	; 0x2afe <vfprintf+0x2f6>
    2af8:	8f 2d       	mov	r24, r15
    2afa:	86 78       	andi	r24, 0x86	; 134
    2afc:	09 f0       	breq	.+2      	; 0x2b00 <vfprintf+0x2f8>
    2afe:	1f 5f       	subi	r17, 0xFF	; 255
    2b00:	0f 2d       	mov	r16, r15
    2b02:	f3 fc       	sbrc	r15, 3
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <vfprintf+0x326>
    2b06:	f0 fe       	sbrs	r15, 0
    2b08:	0f c0       	rjmp	.+30     	; 0x2b28 <vfprintf+0x320>
    2b0a:	1e 15       	cp	r17, r14
    2b0c:	10 f0       	brcs	.+4      	; 0x2b12 <vfprintf+0x30a>
    2b0e:	9d 2c       	mov	r9, r13
    2b10:	0b c0       	rjmp	.+22     	; 0x2b28 <vfprintf+0x320>
    2b12:	9d 2c       	mov	r9, r13
    2b14:	9e 0c       	add	r9, r14
    2b16:	91 1a       	sub	r9, r17
    2b18:	1e 2d       	mov	r17, r14
    2b1a:	06 c0       	rjmp	.+12     	; 0x2b28 <vfprintf+0x320>
    2b1c:	80 e2       	ldi	r24, 0x20	; 32
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	b3 01       	movw	r22, r6
    2b22:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2b26:	1f 5f       	subi	r17, 0xFF	; 255
    2b28:	1e 15       	cp	r17, r14
    2b2a:	c0 f3       	brcs	.-16     	; 0x2b1c <vfprintf+0x314>
    2b2c:	04 c0       	rjmp	.+8      	; 0x2b36 <vfprintf+0x32e>
    2b2e:	1e 15       	cp	r17, r14
    2b30:	10 f4       	brcc	.+4      	; 0x2b36 <vfprintf+0x32e>
    2b32:	e1 1a       	sub	r14, r17
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <vfprintf+0x330>
    2b36:	ee 24       	eor	r14, r14
    2b38:	04 ff       	sbrs	r16, 4
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <vfprintf+0x352>
    2b3c:	80 e3       	ldi	r24, 0x30	; 48
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	b3 01       	movw	r22, r6
    2b42:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2b46:	02 ff       	sbrs	r16, 2
    2b48:	1d c0       	rjmp	.+58     	; 0x2b84 <vfprintf+0x37c>
    2b4a:	01 fd       	sbrc	r16, 1
    2b4c:	03 c0       	rjmp	.+6      	; 0x2b54 <vfprintf+0x34c>
    2b4e:	88 e7       	ldi	r24, 0x78	; 120
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e c0       	rjmp	.+28     	; 0x2b70 <vfprintf+0x368>
    2b54:	88 e5       	ldi	r24, 0x58	; 88
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0b c0       	rjmp	.+22     	; 0x2b70 <vfprintf+0x368>
    2b5a:	80 2f       	mov	r24, r16
    2b5c:	86 78       	andi	r24, 0x86	; 134
    2b5e:	91 f0       	breq	.+36     	; 0x2b84 <vfprintf+0x37c>
    2b60:	01 ff       	sbrs	r16, 1
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <vfprintf+0x360>
    2b64:	8b e2       	ldi	r24, 0x2B	; 43
    2b66:	01 c0       	rjmp	.+2      	; 0x2b6a <vfprintf+0x362>
    2b68:	80 e2       	ldi	r24, 0x20	; 32
    2b6a:	f7 fc       	sbrc	r15, 7
    2b6c:	8d e2       	ldi	r24, 0x2D	; 45
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	b3 01       	movw	r22, r6
    2b72:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2b76:	06 c0       	rjmp	.+12     	; 0x2b84 <vfprintf+0x37c>
    2b78:	80 e3       	ldi	r24, 0x30	; 48
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	b3 01       	movw	r22, r6
    2b7e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2b82:	9a 94       	dec	r9
    2b84:	d9 14       	cp	r13, r9
    2b86:	c0 f3       	brcs	.-16     	; 0x2b78 <vfprintf+0x370>
    2b88:	da 94       	dec	r13
    2b8a:	f1 01       	movw	r30, r2
    2b8c:	ed 0d       	add	r30, r13
    2b8e:	f1 1d       	adc	r31, r1
    2b90:	80 81       	ld	r24, Z
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	b3 01       	movw	r22, r6
    2b96:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2b9a:	dd 20       	and	r13, r13
    2b9c:	a9 f7       	brne	.-22     	; 0x2b88 <vfprintf+0x380>
    2b9e:	06 c0       	rjmp	.+12     	; 0x2bac <vfprintf+0x3a4>
    2ba0:	80 e2       	ldi	r24, 0x20	; 32
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	b3 01       	movw	r22, r6
    2ba6:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2baa:	ea 94       	dec	r14
    2bac:	ee 20       	and	r14, r14
    2bae:	c1 f7       	brne	.-16     	; 0x2ba0 <vfprintf+0x398>
    2bb0:	43 ce       	rjmp	.-890    	; 0x2838 <vfprintf+0x30>
    2bb2:	f3 01       	movw	r30, r6
    2bb4:	66 81       	ldd	r22, Z+6	; 0x06
    2bb6:	77 81       	ldd	r23, Z+7	; 0x07
    2bb8:	cb 01       	movw	r24, r22
    2bba:	2b 96       	adiw	r28, 0x0b	; 11
    2bbc:	e2 e1       	ldi	r30, 0x12	; 18
    2bbe:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__>

00002bc2 <strnlen_P>:
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	05 90       	lpm	r0, Z+
    2bc6:	61 50       	subi	r22, 0x01	; 1
    2bc8:	70 40       	sbci	r23, 0x00	; 0
    2bca:	01 10       	cpse	r0, r1
    2bcc:	d8 f7       	brcc	.-10     	; 0x2bc4 <strnlen_P+0x2>
    2bce:	80 95       	com	r24
    2bd0:	90 95       	com	r25
    2bd2:	8e 0f       	add	r24, r30
    2bd4:	9f 1f       	adc	r25, r31
    2bd6:	08 95       	ret

00002bd8 <strnlen>:
    2bd8:	fc 01       	movw	r30, r24
    2bda:	61 50       	subi	r22, 0x01	; 1
    2bdc:	70 40       	sbci	r23, 0x00	; 0
    2bde:	01 90       	ld	r0, Z+
    2be0:	01 10       	cpse	r0, r1
    2be2:	d8 f7       	brcc	.-10     	; 0x2bda <strnlen+0x2>
    2be4:	80 95       	com	r24
    2be6:	90 95       	com	r25
    2be8:	8e 0f       	add	r24, r30
    2bea:	9f 1f       	adc	r25, r31
    2bec:	08 95       	ret

00002bee <strrev>:
    2bee:	dc 01       	movw	r26, r24
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	67 2f       	mov	r22, r23
    2bf4:	71 91       	ld	r23, Z+
    2bf6:	77 23       	and	r23, r23
    2bf8:	e1 f7       	brne	.-8      	; 0x2bf2 <strrev+0x4>
    2bfa:	32 97       	sbiw	r30, 0x02	; 2
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <strrev+0x18>
    2bfe:	7c 91       	ld	r23, X
    2c00:	6d 93       	st	X+, r22
    2c02:	70 83       	st	Z, r23
    2c04:	62 91       	ld	r22, -Z
    2c06:	ae 17       	cp	r26, r30
    2c08:	bf 07       	cpc	r27, r31
    2c0a:	c8 f3       	brcs	.-14     	; 0x2bfe <strrev+0x10>
    2c0c:	08 95       	ret

00002c0e <fputc>:
    2c0e:	0f 93       	push	r16
    2c10:	1f 93       	push	r17
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	8c 01       	movw	r16, r24
    2c18:	eb 01       	movw	r28, r22
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	81 ff       	sbrs	r24, 1
    2c1e:	1b c0       	rjmp	.+54     	; 0x2c56 <fputc+0x48>
    2c20:	82 ff       	sbrs	r24, 2
    2c22:	0d c0       	rjmp	.+26     	; 0x2c3e <fputc+0x30>
    2c24:	2e 81       	ldd	r18, Y+6	; 0x06
    2c26:	3f 81       	ldd	r19, Y+7	; 0x07
    2c28:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2c:	28 17       	cp	r18, r24
    2c2e:	39 07       	cpc	r19, r25
    2c30:	64 f4       	brge	.+24     	; 0x2c4a <fputc+0x3c>
    2c32:	e8 81       	ld	r30, Y
    2c34:	f9 81       	ldd	r31, Y+1	; 0x01
    2c36:	01 93       	st	Z+, r16
    2c38:	f9 83       	std	Y+1, r31	; 0x01
    2c3a:	e8 83       	st	Y, r30
    2c3c:	06 c0       	rjmp	.+12     	; 0x2c4a <fputc+0x3c>
    2c3e:	e8 85       	ldd	r30, Y+8	; 0x08
    2c40:	f9 85       	ldd	r31, Y+9	; 0x09
    2c42:	80 2f       	mov	r24, r16
    2c44:	09 95       	icall
    2c46:	89 2b       	or	r24, r25
    2c48:	31 f4       	brne	.+12     	; 0x2c56 <fputc+0x48>
    2c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4e:	01 96       	adiw	r24, 0x01	; 1
    2c50:	9f 83       	std	Y+7, r25	; 0x07
    2c52:	8e 83       	std	Y+6, r24	; 0x06
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <fputc+0x4c>
    2c56:	0f ef       	ldi	r16, 0xFF	; 255
    2c58:	1f ef       	ldi	r17, 0xFF	; 255
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	08 95       	ret

00002c66 <__ultoa_invert>:
    2c66:	fa 01       	movw	r30, r20
    2c68:	aa 27       	eor	r26, r26
    2c6a:	28 30       	cpi	r18, 0x08	; 8
    2c6c:	51 f1       	breq	.+84     	; 0x2cc2 <__ultoa_invert+0x5c>
    2c6e:	20 31       	cpi	r18, 0x10	; 16
    2c70:	81 f1       	breq	.+96     	; 0x2cd2 <__ultoa_invert+0x6c>
    2c72:	e8 94       	clt
    2c74:	6f 93       	push	r22
    2c76:	6e 7f       	andi	r22, 0xFE	; 254
    2c78:	6e 5f       	subi	r22, 0xFE	; 254
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c80:	af 4f       	sbci	r26, 0xFF	; 255
    2c82:	b1 e0       	ldi	r27, 0x01	; 1
    2c84:	3e d0       	rcall	.+124    	; 0x2d02 <__ultoa_invert+0x9c>
    2c86:	b4 e0       	ldi	r27, 0x04	; 4
    2c88:	3c d0       	rcall	.+120    	; 0x2d02 <__ultoa_invert+0x9c>
    2c8a:	67 0f       	add	r22, r23
    2c8c:	78 1f       	adc	r23, r24
    2c8e:	89 1f       	adc	r24, r25
    2c90:	9a 1f       	adc	r25, r26
    2c92:	a1 1d       	adc	r26, r1
    2c94:	68 0f       	add	r22, r24
    2c96:	79 1f       	adc	r23, r25
    2c98:	8a 1f       	adc	r24, r26
    2c9a:	91 1d       	adc	r25, r1
    2c9c:	a1 1d       	adc	r26, r1
    2c9e:	6a 0f       	add	r22, r26
    2ca0:	71 1d       	adc	r23, r1
    2ca2:	81 1d       	adc	r24, r1
    2ca4:	91 1d       	adc	r25, r1
    2ca6:	a1 1d       	adc	r26, r1
    2ca8:	20 d0       	rcall	.+64     	; 0x2cea <__ultoa_invert+0x84>
    2caa:	09 f4       	brne	.+2      	; 0x2cae <__ultoa_invert+0x48>
    2cac:	68 94       	set
    2cae:	3f 91       	pop	r19
    2cb0:	2a e0       	ldi	r18, 0x0A	; 10
    2cb2:	26 9f       	mul	r18, r22
    2cb4:	11 24       	eor	r1, r1
    2cb6:	30 19       	sub	r19, r0
    2cb8:	30 5d       	subi	r19, 0xD0	; 208
    2cba:	31 93       	st	Z+, r19
    2cbc:	de f6       	brtc	.-74     	; 0x2c74 <__ultoa_invert+0xe>
    2cbe:	cf 01       	movw	r24, r30
    2cc0:	08 95       	ret
    2cc2:	46 2f       	mov	r20, r22
    2cc4:	47 70       	andi	r20, 0x07	; 7
    2cc6:	40 5d       	subi	r20, 0xD0	; 208
    2cc8:	41 93       	st	Z+, r20
    2cca:	b3 e0       	ldi	r27, 0x03	; 3
    2ccc:	0f d0       	rcall	.+30     	; 0x2cec <__ultoa_invert+0x86>
    2cce:	c9 f7       	brne	.-14     	; 0x2cc2 <__ultoa_invert+0x5c>
    2cd0:	f6 cf       	rjmp	.-20     	; 0x2cbe <__ultoa_invert+0x58>
    2cd2:	46 2f       	mov	r20, r22
    2cd4:	4f 70       	andi	r20, 0x0F	; 15
    2cd6:	40 5d       	subi	r20, 0xD0	; 208
    2cd8:	4a 33       	cpi	r20, 0x3A	; 58
    2cda:	18 f0       	brcs	.+6      	; 0x2ce2 <__ultoa_invert+0x7c>
    2cdc:	49 5d       	subi	r20, 0xD9	; 217
    2cde:	31 fd       	sbrc	r19, 1
    2ce0:	40 52       	subi	r20, 0x20	; 32
    2ce2:	41 93       	st	Z+, r20
    2ce4:	02 d0       	rcall	.+4      	; 0x2cea <__ultoa_invert+0x84>
    2ce6:	a9 f7       	brne	.-22     	; 0x2cd2 <__ultoa_invert+0x6c>
    2ce8:	ea cf       	rjmp	.-44     	; 0x2cbe <__ultoa_invert+0x58>
    2cea:	b4 e0       	ldi	r27, 0x04	; 4
    2cec:	a6 95       	lsr	r26
    2cee:	97 95       	ror	r25
    2cf0:	87 95       	ror	r24
    2cf2:	77 95       	ror	r23
    2cf4:	67 95       	ror	r22
    2cf6:	ba 95       	dec	r27
    2cf8:	c9 f7       	brne	.-14     	; 0x2cec <__ultoa_invert+0x86>
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	61 05       	cpc	r22, r1
    2cfe:	71 05       	cpc	r23, r1
    2d00:	08 95       	ret
    2d02:	9b 01       	movw	r18, r22
    2d04:	ac 01       	movw	r20, r24
    2d06:	0a 2e       	mov	r0, r26
    2d08:	06 94       	lsr	r0
    2d0a:	57 95       	ror	r21
    2d0c:	47 95       	ror	r20
    2d0e:	37 95       	ror	r19
    2d10:	27 95       	ror	r18
    2d12:	ba 95       	dec	r27
    2d14:	c9 f7       	brne	.-14     	; 0x2d08 <__ultoa_invert+0xa2>
    2d16:	62 0f       	add	r22, r18
    2d18:	73 1f       	adc	r23, r19
    2d1a:	84 1f       	adc	r24, r20
    2d1c:	95 1f       	adc	r25, r21
    2d1e:	a0 1d       	adc	r26, r0
    2d20:	08 95       	ret

00002d22 <__prologue_saves__>:
    2d22:	2f 92       	push	r2
    2d24:	3f 92       	push	r3
    2d26:	4f 92       	push	r4
    2d28:	5f 92       	push	r5
    2d2a:	6f 92       	push	r6
    2d2c:	7f 92       	push	r7
    2d2e:	8f 92       	push	r8
    2d30:	9f 92       	push	r9
    2d32:	af 92       	push	r10
    2d34:	bf 92       	push	r11
    2d36:	cf 92       	push	r12
    2d38:	df 92       	push	r13
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	ca 1b       	sub	r28, r26
    2d4c:	db 0b       	sbc	r29, r27
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	09 94       	ijmp

00002d5a <__epilogue_restores__>:
    2d5a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d5c:	39 88       	ldd	r3, Y+17	; 0x11
    2d5e:	48 88       	ldd	r4, Y+16	; 0x10
    2d60:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d62:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d64:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d66:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d68:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d6c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d6e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d70:	df 80       	ldd	r13, Y+7	; 0x07
    2d72:	ee 80       	ldd	r14, Y+6	; 0x06
    2d74:	fd 80       	ldd	r15, Y+5	; 0x05
    2d76:	0c 81       	ldd	r16, Y+4	; 0x04
    2d78:	1b 81       	ldd	r17, Y+3	; 0x03
    2d7a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d7c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d7e:	ce 0f       	add	r28, r30
    2d80:	d1 1d       	adc	r29, r1
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	ed 01       	movw	r28, r26
    2d8e:	08 95       	ret

00002d90 <_exit>:
    2d90:	f8 94       	cli

00002d92 <__stop_program>:
    2d92:	ff cf       	rjmp	.-2      	; 0x2d92 <__stop_program>
